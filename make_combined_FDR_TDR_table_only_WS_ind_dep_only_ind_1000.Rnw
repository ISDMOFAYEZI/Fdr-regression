\documentclass{article}
\usepackage[margin=0.5in]{geometry}


\begin{document}

<<include=FALSE, cache=FALSE, echo=FALSE>>=
# this is equivalent to \SweaveOpts{...}
opts_chunk$set(fig.path='Figures/', fig.align='center', fig.show='hold')
options(replace.assign=TRUE,width=60,echo=FALSE)
@

<<echo=FALSE, include=FALSE>>=
## Load libraries
library(splines)
library(MASS)
library(xtable)
library(dplyr)

##Source functions
source("functions.R")
@

\section*{Simulations: Overview}

The following 5 functions are considered for $\pi_0(x)$:
<<echo=FALSE, Simulation_scenarios>>=
ntest <- 1000

par(mfrow=c(3,2), cex.lab=1.2)
tme <- seq(0,1, length=ntest)
pi0 <- rep(0.9, length=ntest)
plot(pi0 ~ tme, ylim=c(0,1), xlab=expression(x[1]), ylab=expression(pi[0](x[1])), main="I")

tme <- seq(0,1, length=ntest)
pi0 <- fSingle(tme)
plot(pi0 ~ tme, ylim=c(0,1), xlab=expression(x[1]), ylab=expression(pi[0](x[1])), main="II")

tme1 <- seq(0,1,length=ntest)
tme2cont <- runif(ntest,0,0.5)
set.seed(309441)
tme2 <- rep(NA, ntest)
tme2[tme2cont < 0.127] <- 1
tme2[tme2cont >= 0.127] <- 2
tme2[tme2cont >= 0.302] <- 3
pi0 <- f(tme1, tme2)
##range(pi0)
plot(pi0 ~ tme1, ylim=c(0,1), xlab=expression(x[1]), ylab=expression(pi[0](x[1],x[2])), main="III")

tme1 <- seq(0,1,length=ntest)
tme2cont <- runif(ntest,0,0.5)
set.seed(309441)
tme2 <- rep(NA, ntest)
tme2[tme2cont < 0.127] <- 1
tme2[tme2cont >= 0.127] <- 2
tme2[tme2cont >= 0.302] <- 3
pi0 <- 0.6*f(tme1, tme2)
##range(pi0)
plot(pi0 ~ tme1, ylim=c(0,1), xlab=expression(x[1]), ylab=expression(pi[0](x[1],x[2])), main="IV")

tme <- seq(0,1, length=ntest)
pi0 <- 1-tme
plot(pi0 ~ tme, ylim=c(0,1), xlab=expression(x[1]), ylab=expression(pi[0](x[1])), main="V")

@

\noindent We performed 200 simulations in each scenario.
\\  
\noindent We estimated false discovery rates (FDR) and true positive rates (TPR) percentages for a nominal FDR of 5\%. 
We considered both the theoretical and empirical nulls for the Scott method.
For III and IV, a dummy variable was used for $x_{2}$, along with linear or spline terms (with 3 df) for $x_1$.

\clearpage

\subsection*{Independent test statistics}

We first generated independent test statistics.
\\
\noindent For the beta distribution, we generated the p-values directly from Beta(1,20). For the other distributions, we generated the test statistics and calculated the p-values from them.
For the t-test, we considered 2 groups of 6 (so 2x6 = 10 df) and used the t-statistics instead of the z-statistics for the Scott method. For the chisquared test, 1 df corresponds to a 2x2 table, 4 df to a 3x3 table. 
\\
BL = Boca-Leek, Scott T = Scott theoretical null, Scott E = Scott empirical null

\subsubsection*{1,000 tests}

<<echo=FALSE>>=
##make tables for results
tabResFDR <- expand.grid(pi0x = c("I","II","III","IV","V"),
                         alts = c("Beta(1,20)",
                                  "Norm",
                                  "T",
                                  "Chisq 1 df",
                                  "Chisq 4 df"),
                         est = c("Linear", "Spline"))
tabResFDR <- tabResFDR[order(tabResFDR$pi0x, tabResFDR$alts),]
##get rid of pi0x == "I" and est == "Spline" and pi0X == "V" and est == "Spline"
tabResFDR <- filter(tabResFDR, pi0x != "I" | est != "Spline")
tabResFDR <- filter(tabResFDR, pi0x != "V" | est != "Spline")

tabResFDR <- cbind(tabResFDR, matrix(NA,nrow=nrow(tabResFDR),ncol=5))

colnames(tabResFDR)[4:8] <- c("BL","Scott","Scott_emp","Storey","BH")

tabResFDR$pi0x <- as.character(tabResFDR$pi0x)

tabResTPR <- tabResFDR
@

<<echo=FALSE, include=FALSE>>=
##fill in tables
##make correspondence between directory names and names in tables
DirTabCorr <- cbind(c("alt_beta","alt_t_large","alt_z_large",
                      "alt_chisq_large","alt_chisq_large_3_3"),
                    c("Beta(1,20)","T","Norm",
                      "Chisq 1 df","Chisq 4 df"))
                    
methods <- c("BL","Scott","Scott_emp", "Storey","BH")

for(i in 1:nrow(DirTabCorr))
{
  Dir.i <- DirTabCorr[i,1]
  Tab.i <- DirTabCorr[i,2]
  
  load(paste("Simulations - independent",Dir.i,"FDR_TPR_sims.RData",sep="/"))
  load(paste("Simulations - independent",Dir.i,"FDR_TPR_sims_additional.RData",sep="/"))

  tabResFDR[tabResFDR$pi0x == "I" & tabResFDR$alts == Tab.i,methods] <-
    scen1[methods,"FDR"]
  tabResFDR[(tabResFDR$pi0x == "II" & tabResFDR$alts == Tab.i) & 
              tabResFDR$est == "Linear",methods] <-
    scen2a[methods,"FDR"]
  tabResFDR[(tabResFDR$pi0x == "II" & tabResFDR$alts == Tab.i) & 
              tabResFDR$est == "Spline",methods] <-
    scen2b[methods,"FDR"]
  tabResFDR[(tabResFDR$pi0x == "III" & tabResFDR$alts == Tab.i) & 
              tabResFDR$est == "Linear",methods] <-
    scen3a[methods,"FDR"]
  tabResFDR[(tabResFDR$pi0x == "III" & tabResFDR$alts == Tab.i) & 
              tabResFDR$est == "Spline",methods] <-
    scen3b[methods,"FDR"]
  tabResFDR[(tabResFDR$pi0x == "IV" & tabResFDR$alts == Tab.i) & 
              tabResFDR$est == "Linear",methods] <-
    scen4a[methods,"FDR"]
  tabResFDR[(tabResFDR$pi0x == "IV" & tabResFDR$alts == Tab.i) & 
              tabResFDR$est == "Spline",methods] <-
    scen4b[methods,"FDR"]
  tabResFDR[(tabResFDR$pi0x == "V" & tabResFDR$alts == Tab.i) & 
              tabResFDR$est == "Linear",methods] <-
    scen5[methods,"FDR"]
}

for(i in 1:nrow(DirTabCorr))
{
  Dir.i <- DirTabCorr[i,1]
  Tab.i <- DirTabCorr[i,2]
  
  load(paste("Simulations - independent",Dir.i,"FDR_TPR_sims.RData",sep="/"))
  load(paste("Simulations - independent",Dir.i,"FDR_TPR_sims_additional.RData",sep="/"))
  
  tabResTPR[tabResTPR$pi0x == "I" & tabResTPR$alts == Tab.i,methods] <-
    scen1[methods,"TPR"]
  tabResTPR[(tabResTPR$pi0x == "II" & tabResTPR$alts == Tab.i) & 
              tabResTPR$est == "Linear",methods] <-
    scen2a[methods,"TPR"]
  tabResTPR[(tabResTPR$pi0x == "II" & tabResTPR$alts == Tab.i) & 
              tabResTPR$est == "Spline",methods] <-
    scen2b[methods,"TPR"]
  tabResTPR[(tabResTPR$pi0x == "III" & tabResTPR$alts == Tab.i) & 
              tabResTPR$est == "Linear",methods] <-
    scen3a[methods,"TPR"]
  tabResTPR[(tabResTPR$pi0x == "III" & tabResTPR$alts == Tab.i) & 
              tabResTPR$est == "Spline",methods] <-
    scen3b[methods,"TPR"]
  tabResTPR[(tabResTPR$pi0x == "IV" & tabResTPR$alts == Tab.i) & 
              tabResTPR$est == "Linear",methods] <-
    scen4a[methods,"TPR"]
  tabResTPR[(tabResTPR$pi0x == "IV" & tabResTPR$alts == Tab.i) & 
              tabResTPR$est == "Spline",methods] <-
    scen4b[methods,"TPR"]
  tabResTPR[(tabResTPR$pi0x == "V" & tabResTPR$alts == Tab.i) & 
              tabResTPR$est == "Linear",methods] <-
    scen5[methods,"TPR"]
}

identical(tabResFDR[,1:3], tabResTPR[,1:3])
tabResFDR.TPR <- cbind(tabResFDR, tabResTPR[,4:8])
colnames(tabResFDR.TPR)[1:3] <- c("pi0(x)","Distribution under H1","Regression model")

##order by second column (distribution)
tabResFDR.TPR <- tabResFDR.TPR[order(tabResFDR.TPR[,2]),]

##change everything to % 
tabResFDR.TPR[,-(1:3)] <- sapply(tabResFDR.TPR[,-(1:3)], function(x){x*100})

##for anything that's not Norm or T, change the Scott method to be NA
tabResFDR.TPR[(as.character(tabResFDR.TPR[,2]) != "Norm") & 
                (as.character(tabResFDR.TPR[,2]) != "T"), c(5,6,10,11)] <- NA
@

\clearpage

<<echo=FALSE, results='asis'>>=
tab <- xtable(tabResFDR.TPR,align=c("l","l","l","l|","l","l","l","l","l|","l","l","l","l","l"),digits=1)
addtorow <- list()
addtorow$pos <- list(0,0)
addtorow$command <- c("&&& \\multicolumn{5}{c}{FDR} & \\multicolumn{5}{c}{TPR}\\\\\n",
                      "$\\pi_0(x)$ &  Dist. under $H_1$ & Reg. model & BL & Scott T & Scott E & Storey & BH & BL & Scott T & Scott E & Storey & BH    \\\\\n")
print(tab[1:40, ], hline.after=c(-1, 0, 8, 16, 24, 32, 40), include.colnames=FALSE, include.rownames=FALSE,
      add.to.row=addtorow)
@

\end{document}
