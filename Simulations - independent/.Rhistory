}
bestUsePoint <- usePoint;
bestEndPoint <- TotalPoint;
x <- xall[bestUsePoint : bestEndPoint];
y <- yall[bestUsePoint : bestEndPoint];
w = 1/y;
fit <- lm(y~x, weights = w);
bestRSquare <- summary(fit)$r.squared;
longest <- bestEndPoint - bestUsePoint + 1;
}
#if (myRSquare < 0.98 && usePoint == (TotalPoint-3)){
if ( TotalPoint-3 >= 1){
usePoint <- TotalPoint-3;
myRSquare <- 1;
while (myRSquare > 0.98 && usePoint >=1 ){
x <- xall[usePoint : (TotalPoint-1)];
y <- yall[usePoint : (TotalPoint-1)];
w = 1/y;
fit <- lm(y~x, weights = w);
myRSquare <- summary(fit)$r.squared;
usePoint <- usePoint - 1;
}
if (myRSquare <= 0.98){
if (usePoint == (TotalPoint -4)) {
usePoint <- usePoint + 1
}else{
usePoint <- usePoint + 2;
}
}else{
usePoint <- usePoint + 1;
}
x <- xall[usePoint : (TotalPoint-1)];
y <- yall[usePoint : (TotalPoint-1)];
w = 1/y;
fit <- lm(y~x, weights = w);
myRSquare <- summary(fit)$r.squared;
replace <- 0;
if (bestRSquare < 0.98 && myRSquare > 0.98){
replace <- 1;
}else if ( ((bestRSquare > 0.98 && myRSquare > 0.98) || (bestRSquare < 0.98 && myRSquare < 0.98))&& longest < (TotalPoint-usePoint)) {
replace <- 1;
}
if (replace == 1) {
bestUsePoint <- usePoint;
bestEndPoint <- TotalPoint-1;
bestRSquare <- myRSquare;
longest <- bestEndPoint - bestUsePoint + 1;
}
}
#if (myRSquare < 0.98 && usePoint == (TotalPoint-4)){
if (TotalPoint-4 >= 1){
usePoint <- TotalPoint-4;
myRSquare <- 1;
while (myRSquare > 0.98 && usePoint >=1){
x <- xall[usePoint : (TotalPoint-2)];
y <- yall[usePoint : (TotalPoint-2)];
w = 1/y;
fit <- lm(y~x, weights = w);
myRSquare <- summary(fit)$r.squared;
usePoint <- usePoint - 1;
}
if (myRSquare <= 0.98){
if (usePoint == (TotalPoint -5)) {
usePoint <- usePoint + 1
}else{
usePoint <- usePoint + 2;
}
}else{
usePoint <- usePoint + 1;
}
x <- xall[usePoint : (TotalPoint-2)];
y <- yall[usePoint : (TotalPoint-2)];
w = 1/y;
fit <- lm(y~x, weights = w);
myRSquare <- summary(fit)$r.squared;
replace <- 0;
if (bestRSquare < 0.98 && myRSquare > 0.98){
replace <- 1;
}else if (((bestRSquare > 0.98 && myRSquare > 0.98) || (bestRSquare < 0.98 && myRSquare < 0.98)) && longest < (TotalPoint-usePoint-1)) {
replace <- 1;
}
if (replace == 1) {
bestUsePoint <- usePoint;
bestEndPoint <- TotalPoint-2;
bestRSquare <- myRSquare;
longest <- bestEndPoint - bestUsePoint + 1;
}
}
if ( TotalPoint <3 ) {
list();
}else{
x <- xall[bestUsePoint : bestEndPoint];
y <- yall[bestUsePoint : bestEndPoint];
w <- 1/y;
fit <- lm(y~x, weights = w);
mCoef <- coef(summary(fit));
mResidual <- c(TotalPoint);
for (i in 1: TotalPoint){
mResidual[i] <- (yall[i]-(xall[i]*mCoef[2,1]+mCoef[1,1]))/(yall[i]+(xall[i]*mCoef[2,1]+mCoef[1,1]));
}
usedPoints = bestEndPoint - bestUsePoint + 1;
Rsquare <-summary(fit)$r.squared;
list(mCoef=mCoef, mResidual=mResidual, Rsquare=Rsquare, usedPoints = usedPoints)
}
}
100/10^6
1/10000
3+1/3*3+1/3^2*2+1/3^3*4
2+1/3*4+1/3^2*4
choose(6,2)
(3/4+3/5+3/6)/15
(3/4+3/5+3/6)
4.37037*3
3.777778*3
(3+1/3*3+1/3^2*2+1/3^3*4)*3
(1-0.25^5)/0.75
(1-0.25^5)/0.75/2
(1-0.25^4)/0.75
(1-0.25^4)/0.75/2
2+0.25+0.25^2
2.3125/1.329
2.3125/1.328
1.1/0.63
13/4.37037
11/3.777778
2.5/2.3125
1.3/1.1
m=20
t=100
,
,
50*0.75^4
762+27+47
getwd()
x <- rnorm(1000)
u <- pnorm(x)
hist(u)
## Set up the time vector and the probability of being null
tme <- seq(-1,2,length=ntest)
pi0 <- pnorm(tme)
ntest <- 1000
## Set up the time vector and the probability of being null
tme <- seq(-1,2,length=ntest)
pi0 <- pnorm(tme)
ntest <- length(pi0)
nullI <- rbinom(ntest,prob=pi0,size=1)> 0
n1 <- floor(ntest/2)
##simulate means
mu <- c(rnorm(n1,3,1),rnorm(ntest-n1,-3,1))
mu[nullI == 1] <- 0
zValues <- rnorm(ntest, mu, 1)
hist(zValues)
hist(zValues[nullI==1])
hist(zValues[nullI==0])
pValues <- pnorm(zValues)
hist(pValues[nullI==1])
hist(pValues[nullI==0])
pValues <- 1-2*pnorm(abs(zValues))
hist(pValues[nullI==0])
hist(pValues[nullI==1])
pValues <- 2*pnorm(abs(zValues))-1
hist(pValues[nullI==1])
hist(pValues[nullI==0])
2*(1-pnorm(1.96))
pValues <- 2*(1-pnorm(abs(zValues)))
hist(pValues[nullI==1])
hist(pValues[nullI==0])
zValues <- rnorm(1000)
pValues <- 2*(1-pnorm(abs(zValues)))
hist(pValues)
zValues <- rnorm(1000)
pValues <- 2*(1-pnorm(abs(zValues)))
hist(pValues)
rbeta(1000,1,2)
hist(rbeta(1000,1,2))
ntest=1000
tme <- seq(-1,2,length=ntest)
pi0 <- 1/4*tme+1/2
ntest <- length(pi0)
nullI <- rbinom(ntest,prob=pi0,size=1)> 0
n1 <- floor(ntest/2)
##simulate means
mu <- c(rnorm(n1,3,1),rnorm(ntest-n1,-3,1))
##mu <- c(rnorm(n1,2,1),rnorm(ntest-n1,-2,1))
mu[nullI == 1] <- 0
zValues <- rnorm(ntest, mu, 1)
pValues <- 2*(1-pnorm(abs(zValues)))
hist(pValues[!nullI])
hist(rbeta(1000,1,20))
hist(rbeta(1000,1,2))
hist(pValues[!nullI])
hist(rbeta(1000,1,20))
?rrt
?rt
zValues <- rt(ntest, mu, 5)
pValues <- 2*(1-pnorm(abs(zValues)))
zValues <- rt(ntest, 5, mu)
?eigen
T <- cbind(c(0.2,0.8,0.8),c(0.4,0.2,0),c(0.4,0,0.2))
T
eigen(T)
library(readr)
install.packages(c("readr","Hmisc","fdrtool"))
library(readr)
library(dplyr)
library(fdrtool)
library(betareg)
load("BMI_GIANT_GWAS.RData")
set.seed(310841)
d1 = tot %>% sample_n(5e4)
tot <- BMI_GIANT_GWAS
set.seed(310841)
d1 = tot %>% sample_n(5e4)
head(tot)
plot(d1$Freq_MAF_Hapmap ~ d1$N)
plot(d1$Freq_MAF_Int_Hapmap ~ d1$N)
boxplot(d1$N ~ d1$Freq_MAF_Int_Hapmap)
X <- model.matrix(~ splines::ns(N,5) + Freq_MAF_Int_Hapmap, data = tot)[,-1]
dim(X)
head(X)
abline(v=median(dd1$N), col="red")
abline(v=median(d1$N), col="red")
plot(d1$Freq_MAF_Int_Hapmap ~ d1$N)
plot(d1$Freq_MAF_Hapmap ~ d1$N)
abline(v=median(d1$N), col="red")
head(tot)
median(d1$N)/max(d1$N)
length(NULL)
genPvalsIndChisq <- function(pi0, muAlt, r=2, c=2)
{
ntest <- length(pi0)
nullI <- rbinom(ntest,prob=pi0,size=1)> 0
n1 <- floor(ntest/2)
##simulate means
mu <- c(rnorm(n1,muAlt,1),rnorm(ntest-n1,-muAlt,1))
mu[nullI == 1] <- 0
chisqValues <- rep(NA, ntest)
df.chisq <- (r-1)*(c-1)
for(i in 1:ntest)
{
chisqValues[i] <- rchisq(1, df=df.chisq, ncp=mu[i])
}
pValues <- 1-pchisq(chisqValues, df=df.chisq)
zValues <- qnorm(1-pValues/2)
list(zValues=zValues, pValues=pValues, null=nullI)
}
p <- genpValsIndChisq(rep(0.9,1000), 9)
p <- genPValsIndChisq(rep(0.9,1000), 9)
p <- genPvalsIndChisq(rep(0.9,1000), 9)
warnings()
pi0 <- rep(0.9, 1000)
muAlt <- 9
r=2
c=2
ntest <- length(pi0)
nullI <- rbinom(ntest,prob=pi0,size=1)> 0
n1 <- floor(ntest/2)
##simulate means
mu <- c(rnorm(n1,muAlt,1),rnorm(ntest-n1,-muAlt,1))
mu[nullI == 1] <- 0
mean(mu)
sum(nullI)
hist(mu)
sum(mu==0)
genPvalsIndChisq <- function(pi0, muAlt, r=2, c=2)
{
ntest <- length(pi0)
nullI <- rbinom(ntest,prob=pi0,size=1)> 0
n1 <- floor(ntest/2)
##simulate means
mu <- abs(c(rnorm(n1,muAlt,1),rnorm(ntest-n1,-muAlt,1)))
mu[nullI == 1] <- 0
chisqValues <- rep(NA, ntest)
df.chisq <- (r-1)*(c-1)
for(i in 1:ntest)
{
chisqValues[i] <- rchisq(1, df=df.chisq, ncp=mu[i])
}
pValues <- 1-pchisq(chisqValues, df=df.chisq)
zValues <- qnorm(1-pValues/2)
list(zValues=zValues, pValues=pValues, null=nullI)
}
p <- genPvalsIndChisq(rep(0.9,1000),9)
hist(p)
hist(p$pValues)
2*2
install.packages("Hmisc")
library(readr)
library(dplyr)
library(fdrtool)
library(betareg)
library(splines)
library(Hmisc)
install.packages("scales")
)
library(ggplot2)
library(reshape2)
library(FDRreg)
4.8+1.2+1.68
4.8+1.2+1.68+3.6
4.8+1.2+1.68+1.2
library(mnormt) ## for multivariate normal and t distributions
0/0
1/0
setwd("~/Research/FDR regression/Simulations - dependent - revision")
## Load libraries
library(splines)
library(MASS)
library(xtable)
library(dplyr)
##Source functions
source("../functions.R")
ntest <- 1000
par(mfrow=c(2,2))
tme <- seq(0,1, length=ntest)
pi0 <- rep(0.9, length=ntest)
plot(pi0 ~ tme, ylim=c(0.3,1), xlab="x1", ylab="pi0(x1)", main="I")
tme <- seq(0,1, length=ntest)
pi0 <- fSingle(tme)
plot(pi0 ~ tme, ylim=c(0.3,1), xlab="x1", ylab="pi0(x1)", main="II")
tme1 <- seq(0,1,length=ntest)
tme2cont <- runif(ntest,0,0.5)
set.seed(309441)
tme2 <- rep(NA, ntest)
tme2[tme2cont < 0.127] <- 1
tme2[tme2cont >= 0.127] <- 2
tme2[tme2cont >= 0.302] <- 3
pi0 <- f(tme1, tme2)
##range(pi0)
plot(pi0 ~ tme1, ylim=c(0.3,1), xlab="x1", ylab="pi0(x1,x2)", main="III")
tme1 <- seq(0,1,length=ntest)
tme2cont <- runif(ntest,0,0.5)
set.seed(309441)
tme2 <- rep(NA, ntest)
tme2[tme2cont < 0.127] <- 1
tme2[tme2cont >= 0.127] <- 2
tme2[tme2cont >= 0.302] <- 3
pi0 <- 0.8*f(tme1, tme2)
##range(pi0)
plot(pi0 ~ tme1, ylim=c(0.3,1), xlab="x1", ylab="pi0(x1,x2)", main="IV")
##make tables for results
tabResFDR <- expand.grid(pi0x = c("I","II","III","IV"),
alts = c("Beta(1,20)",
"Norm (W.S.)",
"Norm (P.S.)",
"T (W.S.)",
"T (P.S.)",
"Chisq 1 df (W.S.)",
"Chisq 4 df (W.S.)",
"Chisq 1 df (P.S.)",
"Chisq 4 df (P.S.)"),
est = c("Linear", "Spline"))
tabResFDR <- tabResFDR[order(tabResFDR$pi0x, tabResFDR$alts),]
##get rid of pi0x == "I" and est == "Spline"
tabResFDR <- filter(tabResFDR, pi0x != "I" | est != "Spline")
tabResFDR <- cbind(tabResFDR, matrix(NA,nrow=nrow(tabResFDR),ncol=4))
colnames(tabResFDR)[4:7] <- c("BL","Scott","Storey","BH")
tabResFDR$pi0x <- as.character(tabResFDR$pi0x)
tabResTPR <- tabResFDR
range(0:10)
range(0)
range(c(0,0))
range(c(-Inf,0))
range(c(-Inf,-Inf))
range(c(-Inf,NA))
y <- rep(1:2, each=100)
plot(y)
x <- y
plot(y ~ x)
jitter
?jitter
plot(jitter(y) ~ x)
plot(jitter(y) ~ jitter(x))
setwd("~/Research/FDR regression/Simulations - independent - revision")
library(splines)
library(MASS)
source("../functions.R")
alts <- c("alt_z_large","alt_t_large")
alt=alt[1]
alt=alts[1]
par(mfrow=c(1,1))
load(paste(alt,"simResults_1.RData",sep="/"))
load(paste(alt,"simResults_pi0x_thresh_1.RData",sep="/"))
load(paste(alt,"simResults_pi0_Scott_1.RData",sep="/"))
load(paste(alt,"simResults_pi0_Scott_emp_1.RData",sep="/"))
load(paste(alt,"simResults_pi0x_Scott_1.RData",sep="/"))
load(paste(alt,"simResults_pi0x_Scott_emp_1.RData",sep="/"))
load(paste(alt,"simResults_pi0x_Scott_emp_1.RData",sep="/"))
ls()
pi0hatScottEmp_Mean <- pi0hatScottMean
load(paste(alt,"simResults_pi0x_Scott_1.RData",sep="/"))
plotMeanPi0(pi0, pi0MeansVars, pi0hatScottMean, tme=tme)
legend("topright", inset=c(-0.71,0),
legend=c("Truth", expression(paste("SLR (", lambda, "=0.8)")),
expression(paste("SLR (", lambda, "=0.9)")),
"SLR (smoothed)", "SLR (Scott)"),
col=c("black", "orange", "orange", "orange", "blue"), bty="n",
lwd=c(8,2,2,3,3), lty=c(1,3,2,1,1),
cex=1.2, x.intersp=0.2, y.intersp=1.0)
plotMeanPi0(pi0, pi0MeansVars, pi0hatScottMean, tme=tme)
legend("topright", inset=c(-0.71,0),
legend=c("Truth", expression(paste("SLR (", lambda, "=0.8)")),
expression(paste("SLR (", lambda, "=0.9)")),
"SLR (smoothed)", "SLR (Scott)"),
col=c("black", "orange", "orange", "orange", "blue"), bty="n",
main="I",
lwd=c(8,2,2,3,3), lty=c(1,3,2,1,1),
cex=1.2, x.intersp=0.2, y.intersp=1.0)
legend("topright", inset=c(-0.71,0),
legend=c("Truth", expression(paste("SLR (", lambda, "=0.8)")),
expression(paste("SLR (", lambda, "=0.9)")),
"SLR (smoothed)", "SLR (Scott)"),
col=c("black", "orange", "orange", "orange", "blue"), bty="n",
main="I",
lwd=c(8,2,2,3,3), lty=c(1,3,2,1,1),
cex=1.2, x.intersp=0.2, y.intersp=1.0)
load(paste(alt,"simResults_2.RData",sep="/"))
load(paste(alt,"simResults_pi0x_thresh_2.RData",sep="/"))
load(paste(alt,"simResults_pi0x_Scott_emp_2.RData",sep="/"))
pi0hatScottLinEmp_Mean <- pi0hatLin.ScottMean
pi0hatScottSplEmp_Mean <- pi0hatSpl.ScottMean
load(paste(alt,"simResults_pi0x_Scott_2.RData",sep="/"))
plotMeanPi0(pi0, pi0Lin.MeansVars, pi0hatLin.ScottMean, tme=tme)
legend("topright", inset=c(-0.71,0),##x=-0.2, y=0.45,##"bottomright", ##x=-100, y=0.3,
legend=c("Truth",
expression(paste("SLR (", lambda, "=0.8)")),
expression(paste("SLR (", lambda, "=0.9)")),
"SLR (smoothed)",
"SLR (Scott)"),
col=c("black",
rep("orange",3),
"blue"),
bty="n",
lwd=c(8,2,2,3,3), lty=c(1,3,2,1,1),
cex=1.2, x.intersp=0.2, y.intersp=1.0)
plotMeanPi0(pi0, pi0Spl.MeansVars, pi0hatSpl.ScottMean, tme=tme)
legend("topright", inset=c(-0.71,0),##x=-0.2, y=0.45,##"bottomright", ##x=-100, y=0.3,
legend=c("Truth",
expression(paste("B-splines, 3 df (", lambda, "=0.8)")),
expression(paste("B-splines, 3 df (", lambda, "=0.9)")),
"B-splines, 3 df (smoothed)",
"B-splines, 3 df (Scott)"),
col=c("black",
rep("orange",3),
"blue"),
bty="n",
lwd=c(8,2,2,3,3), lty=c(1,3,2,1,1),
cex=1.2, x.intersp=0.2, y.intersp=1.0)
load(paste(alt,"simResults_3.RData",sep="/"))
load(paste(alt,"simResults_pi0x_thresh_3.RData",sep="/"))
load(paste(alt,"simResults_pi0x_Scott_emp_3.RData",sep="/"))
pi0hatScottLinEmp_Mean <- pi0hatLin.ScottMean
pi0hatScottSplEmp_Mean <- pi0hatSpl.ScottMean
load(paste(alt,"simResults_pi0x_Scott_3.RData",sep="/"))
plotMeanPi0(pi0, pi0Lin.MeansVars, pi0hatLin.ScottMean, tme=tme)
legend("topright", inset=c(-0.71,0),##x=-0.2, y=0.45,##"bottomright", ##x=-100, y=0.3,
legend=c("Truth",
expression(paste("SLR (", lambda, "=0.8)")),
expression(paste("SLR (", lambda, "=0.9)")),
"SLR (smoothed)",
"SLR (Scott)"),
col=c("black",
rep("orange",3),
"blue"),
bty="n",
lwd=c(8,2,2,3,3), lty=c(1,3,2,1,1),
cex=1.2, x.intersp=0.2, y.intersp=1.0)
plotMeanPi0(pi0, pi0Spl.MeansVars, pi0hatSpl.ScottMean, tme=tme)
legend("topright", inset=c(-0.71,0),##x=-0.2, y=0.45,##"bottomright", ##x=-100, y=0.3,
legend=c("Truth",
expression(paste("B-splines, 3 df (", lambda, "=0.8)")),
expression(paste("B-splines, 3 df (", lambda, "=0.9)")),
"B-splines, 3 df (smoothed)",
"B-splines, 3 df (Scott)"),
col=c("black",
rep("orange",3),
"blue"),
bty="n",
lwd=c(8,2,2,3,3), lty=c(1,3,2,1,1),
cex=1.2, x.intersp=0.2, y.intersp=1.0)
load(paste(alt,"simResults_4.RData",sep="/"))
load(paste(alt,"simResults_pi0x_thresh_4.RData",sep="/"))
load(paste(alt,"simResults_pi0x_Scott_emp_4.RData",sep="/"))
pi0hatScottLinEmp_Mean <- pi0hatLin.ScottMean
pi0hatScottSplEmp_Mean <- pi0hatSpl.ScottMean
load(paste(alt,"simResults_pi0x_Scott_4.RData",sep="/"))
plotMeanPi0(pi0, pi0Lin.MeansVars, pi0hatLin.ScottMean, tme=tme)
legend("topright", inset=c(-0.71,0),##x=-0.2, y=0.45,##"bottomright", ##x=-100, y=0.3,
legend=c("Truth",
expression(paste("SLR (", lambda, "=0.8)")),
expression(paste("SLR (", lambda, "=0.9)")),
"SLR (smoothed)",
"SLR (Scott)"),
col=c("black",
rep("orange",3),
"blue"),
bty="n",
lwd=c(8,2,2,3,3), lty=c(1,3,2,1,1),
cex=1.2, x.intersp=0.2, y.intersp=1.0)
plotMeanPi0(pi0, pi0Spl.MeansVars, pi0hatSpl.ScottMean, tme=tme)
legend("topright", inset=c(-0.71,0),##x=-0.2, y=0.45,##"bottomright", ##x=-100, y=0.3,
legend=c("Truth",
expression(paste("B-splines, 3 df (", lambda, "=0.8)")),
expression(paste("B-splines, 3 df (", lambda, "=0.9)")),
"B-splines, 3 df (smoothed)",
"B-splines, 3 df (Scott)"),
col=c("black",
rep("orange",3),
"blue"),
bty="n",
lwd=c(8,2,2,3,3), lty=c(1,3,2,1,1),
cex=1.2, x.intersp=0.2, y.intersp=1.0)
