ntest <- length(pi0)
nullI <- rbinom(ntest,prob=pi0,size=1)> 0
n1 <- floor(ntest/2)
##simulate means
mu <- c(rnorm(n1,3,1),rnorm(ntest-n1,-3,1))
##mu <- c(rnorm(n1,2,1),rnorm(ntest-n1,-2,1))
mu[nullI == 1] <- 0
zValues <- rnorm(ntest, mu, 1)
pValues <- 2*(1-pnorm(abs(zValues)))
hist(pValues[!nullI])
hist(rbeta(1000,1,20))
hist(rbeta(1000,1,2))
hist(pValues[!nullI])
hist(rbeta(1000,1,20))
?rrt
?rt
zValues <- rt(ntest, mu, 5)
pValues <- 2*(1-pnorm(abs(zValues)))
zValues <- rt(ntest, 5, mu)
?eigen
T <- cbind(c(0.2,0.8,0.8),c(0.4,0.2,0),c(0.4,0,0.2))
T
eigen(T)
library(readr)
install.packages(c("readr","Hmisc","fdrtool"))
library(readr)
library(dplyr)
library(fdrtool)
library(betareg)
load("BMI_GIANT_GWAS.RData")
set.seed(310841)
d1 = tot %>% sample_n(5e4)
tot <- BMI_GIANT_GWAS
set.seed(310841)
d1 = tot %>% sample_n(5e4)
head(tot)
plot(d1$Freq_MAF_Hapmap ~ d1$N)
plot(d1$Freq_MAF_Int_Hapmap ~ d1$N)
boxplot(d1$N ~ d1$Freq_MAF_Int_Hapmap)
X <- model.matrix(~ splines::ns(N,5) + Freq_MAF_Int_Hapmap, data = tot)[,-1]
dim(X)
head(X)
abline(v=median(dd1$N), col="red")
abline(v=median(d1$N), col="red")
plot(d1$Freq_MAF_Int_Hapmap ~ d1$N)
plot(d1$Freq_MAF_Hapmap ~ d1$N)
abline(v=median(d1$N), col="red")
head(tot)
median(d1$N)/max(d1$N)
length(NULL)
genPvalsIndChisq <- function(pi0, muAlt, r=2, c=2)
{
ntest <- length(pi0)
nullI <- rbinom(ntest,prob=pi0,size=1)> 0
n1 <- floor(ntest/2)
##simulate means
mu <- c(rnorm(n1,muAlt,1),rnorm(ntest-n1,-muAlt,1))
mu[nullI == 1] <- 0
chisqValues <- rep(NA, ntest)
df.chisq <- (r-1)*(c-1)
for(i in 1:ntest)
{
chisqValues[i] <- rchisq(1, df=df.chisq, ncp=mu[i])
}
pValues <- 1-pchisq(chisqValues, df=df.chisq)
zValues <- qnorm(1-pValues/2)
list(zValues=zValues, pValues=pValues, null=nullI)
}
p <- genpValsIndChisq(rep(0.9,1000), 9)
p <- genPValsIndChisq(rep(0.9,1000), 9)
p <- genPvalsIndChisq(rep(0.9,1000), 9)
warnings()
pi0 <- rep(0.9, 1000)
muAlt <- 9
r=2
c=2
ntest <- length(pi0)
nullI <- rbinom(ntest,prob=pi0,size=1)> 0
n1 <- floor(ntest/2)
##simulate means
mu <- c(rnorm(n1,muAlt,1),rnorm(ntest-n1,-muAlt,1))
mu[nullI == 1] <- 0
mean(mu)
sum(nullI)
hist(mu)
sum(mu==0)
genPvalsIndChisq <- function(pi0, muAlt, r=2, c=2)
{
ntest <- length(pi0)
nullI <- rbinom(ntest,prob=pi0,size=1)> 0
n1 <- floor(ntest/2)
##simulate means
mu <- abs(c(rnorm(n1,muAlt,1),rnorm(ntest-n1,-muAlt,1)))
mu[nullI == 1] <- 0
chisqValues <- rep(NA, ntest)
df.chisq <- (r-1)*(c-1)
for(i in 1:ntest)
{
chisqValues[i] <- rchisq(1, df=df.chisq, ncp=mu[i])
}
pValues <- 1-pchisq(chisqValues, df=df.chisq)
zValues <- qnorm(1-pValues/2)
list(zValues=zValues, pValues=pValues, null=nullI)
}
p <- genPvalsIndChisq(rep(0.9,1000),9)
hist(p)
hist(p$pValues)
2*2
install.packages("Hmisc")
library(readr)
library(dplyr)
library(fdrtool)
library(betareg)
library(splines)
library(Hmisc)
install.packages("scales")
)
library(ggplot2)
library(reshape2)
library(FDRreg)
4.8+1.2+1.68
4.8+1.2+1.68+3.6
4.8+1.2+1.68+1.2
library(mnormt) ## for multivariate normal and t distributions
library(mnormt) ## for multivariate normal and t distributions
?rmt
v=10
?gamma
sqrt(v/2)*gamma((v-1)/2)/gamma(v/2)
1/(1-3/(4*v-1))
?mult
df.t=10
mult <- sqrt(df.t/2)*gamma((df.t-1)/2)/gamma(df.t/2)
mult
mu <- 10
i=1
mu[i]
t <- rt(100, df=df.t, ncp=mu[i]/mult)
mean(t)
t <- rt(1000, df=df.t, ncp=mu[i]/mult)
mean(t)
t <- rt(1000, df=df.t, ncp=mu[i])
mean(t)
mean(t)
t <- rt(10000, df=df.t, ncp=mu[i])
mean(t)
t <- rt(10000, df=df.t, ncp=mu[i]/mult)
mean(t)
?rt
## Load libraries
library(splines)
library(MASS)
library(mnormt) ## for multivariate normal and t distributions
library(Matrix) ##for the bdiag function to create block-diagonal matrices
library(doParallel) ##to make cluster (on Windows)
library(foreach) ##to use foreach function that does the parallel processing
library(doRNG) ##for reproducible seeds when doing parallel processing
##Source functions
source("../functions.R")
## Define the number of tests
ntest <- 1000
## Set number of simulations
nSims <- 200
altsGrid <- as.matrix(expand.grid(dist=c("z","t"),nrBlocks=c(10,20),corr=c(0.2,0.5,0.9)))
alts <- apply(altsGrid, 1, function(x){paste("alt",x[1],"large",x[2],x[3],sep="_")})
alts
m=1000
ntest=m
tme <- seq(0,1, length=ntest)
pi0 <- fSingle(tme)
f1 <- function(x){
p2 <- -0.2
p1 <- 1.2
a <- 4/(p1-p2)^2
y <- -a*(x-p1)*(x-p2)
y[x >= 0.7] <- -a*(0.7-p1)*(0.7-p2)
y[x <= (p1+p2)/2] <- 1
y
}
f2 <- function(x){
y <- rep(0, length=length(x))
y[x >= 0.7] <- -2.5*(x[x >= 0.7]-0.7)^2
y
}
f3 <- function(x){
y <- rep(0, length=length(x))
y[x < 0.7] <- -(x[x < 0.7]-0.1)^2
y[x >= 0.7] <- -(min(x[x >= 0.7])-0.1)^2
y[x<=0.1] <- 0
y
}
##smooth function of one covariate for different levels of second covariate
f <- function(x1,x2){
y1 <- f1(x1)
y2 <- f2(x1)
y3 <- f3(x1)
y <- rep(0, length(x1))
y[x2 == 1] <- y1[x2 == 1] + y2[x2 == 1] + 0.12*y3[x2 == 1]
y[x2 == 2] <- y1[x2 == 2] + 0.5*y2[x2 == 2] + 0.06*y3[x2 == 2]
y[x2 == 3] <- y1[x2 == 3] + 0.3*y2[x2 == 3]
y
}
##smooth function of a single variable
fSingle <- function(x){
y1 <- f1(x)
y2 <- f2(x)
y3 <- f3(x)
y <- rep(0, length(x))
##y <- y1 + 0.5*y2 + 0.06*y3
y <- y1 + y2 + 0.12*y3
y
}
tme <- seq(0,1, length=ntest)
pi0 <- fSingle(tme)
plot(pi0 ~ tme)
x=tme
p2 <- -0.2
p1 <- 1.2
a <- 4/(p1-p2)^2
a
p1-pe
p1-p2
(p1-p2)^2
y <- -a*(x-p1)*(x-p2)
y[x >= 0.7] <- -a*(0.7-p1)*(0.7-p2)
y[x <= (p1+p2)/2] <- 1
y
plot(y ~ x)
4/1.96
-a*(0.7-p1)*(0.7-p2)
(0.7-p1)*(0.7-p2)
pi01 <- rep(NA, length(m))
pi01[x <= 5] <- 1
pi01[x <= 0.5] <- 1
pi01[x > 0.5 & x < 0.7] <- -4/19.6*(x+0.2)*(x-1.2)
pi01[x > 0.5 & x < 0.7] <- -4/19.6*(x[x > 0.5 & x < 0.7+0.2)*(x[x > 0.5 & x < 0.7]-1.2)
pi01[x > 0.5 & x < 0.7] <- -4/19.6*(x[x > 0.5 & x < 0.7]+0.2)*(x[x > 0.5 & x < 0.7]-1.2)
pi01 <- rep(NA, length(m))
pi01[x <= 0.5] <- 1
pi01[x > 0.5 & x < 0.7] <- -4/19.6*(x[x > 0.5 & x < 0.7]+0.2)*(x[x > 0.5 & x < 0.7]-1.2)
pi01[x >= 0.7] <- 4/1.96*0.45
plot(pi01 ~ x)
(p1+p2)/2
pi01[x > 0.5 & x < 0.7] <- -4/1.96*(x[x > 0.5 & x < 0.7]+0.2)*(x[x > 0.5 & x < 0.7]-1.2)
plot(pi01 ~ x)
identical(pi0x, y)
identical(pi01, y)
plot(pi01, y)
abline(0,1)
sum((pi01-y)^2)
y <- rep(0, length=length(x))
y[x >= 0.7] <- -2.5*(x[x >= 0.7]-0.7)^2
y
plot(y ~ x)
pi02 <- rep(NA, length(ntest))
pi02[x < 0.7] <- 0
pi02[x >= 0.7] <- -2.5*(x-0.7)^2
pi02[x >= 0.7] <- -2.5*(x[x >= 0.7] -0.7)^2
pi02 <- rep(NA, length(ntest))
pi02[x < 0.7] <- 0
pi02[x >= 0.7] <- -2.5*(x[x >= 0.7] -0.7)^2
plot(pi02 ~ x)
identical(pi02, y)
y <- rep(0, length=length(x))
y[x < 0.7] <- -(x[x < 0.7]-0.1)^2
y[x >= 0.7] <- -(min(x[x >= 0.7])-0.1)^2
y[x<=0.1] <- 0
y
plot(y ~ x)
-0.8^2
-0.6^2
(min(x[x >= 0.7])-0.1)
pi03 <- rep(NA, length=ntest)
pi0[x <= 0.1] <- 0
pi0[x > 0.1 & x < 0.7] <- -(x[x > 0.1 & x < 0.7]-0.1)^2
pi0[x >= 0.7] <- -0.36
pi0[x <= 0.1] <- 0
pi03[x <= 0.1] <- 0
pi03[x > 0.1 & x < 0.7] <- -(x[x > 0.1 & x < 0.7]-0.1)^2
pi03[x >= 0.7] <- -0.36
plot(pi03 ~ x)
identical(pi03,y)
sum((pi03-y)^2)
plot(pi03 ~ y)
abline(0,1)
abline(0,1,col="red",lwd=2)
sqrt(sum((pi03-y)^2))
-4/1.96*(0.5+0.2)*(0.5-1.2)
-4/1.96*(0.7+0.2)*(0.7-1.2)
4/1.96*0.45
-(0.7-0.1)^2
y1 <- f1(x1)
y2 <- f2(x1)
y3 <- f3(x1)
y <- rep(0, length(x1))
y[x2 == 1] <- y1[x2 == 1] + y2[x2 == 1] + 0.12*y3[x2 == 1]
y[x2 == 2] <- y1[x2 == 2] + 0.5*y2[x2 == 2] + 0.06*y3[x2 == 2]
y[x2 == 3] <- y1[x2 == 3] + 0.3*y2[x2 == 3]
tme1 <- seq(0,1,length=ntest)
tme2cont <- runif(ntest,0,0.5)
set.seed(309441)
tme2 <- rep(NA, ntest)
tme2[tme2cont < 0.127] <- 1
tme2[tme2cont >= 0.127] <- 2
tme2[tme2cont >= 0.302] <- 3
x1 <- tme1
x2 <- tme2
y1 <- f1(x1)
y2 <- f2(x1)
y3 <- f3(x1)
y <- rep(0, length(x1))
y[x2 == 1] <- y1[x2 == 1] + y2[x2 == 1] + 0.12*y3[x2 == 1]
y[x2 == 2] <- y1[x2 == 2] + 0.5*y2[x2 == 2] + 0.06*y3[x2 == 2]
y[x2 == 3] <- y1[x2 == 3] + 0.3*y2[x2 == 3]
plot(y ~ x1)
plot(y[x2==1] ~ x1[x2==1])
?intersect
?Reduce
a <- 1:4
b <- 2:4
c <- 1:10
Reduce(intersect, list(a,b,c))
setwd("~/Research/FDR regression/BMI GIANT meta-analysis")
---
title: "Generate plot in Figure 4"
author: "Simina Boca, Jeff Leek"
date: "`r Sys.Date()`"
output: rmarkdown::pdf_document
vignette: >
%\VignetteIndexEntry{swfdr}
%\VignetteEngine{knitr::rmarkdown}
%\VignetteEncoding{UTF-8}
---
<!--
%% \VignetteEngine{knitr::rmarkdown}
-->
```{r global_options, include=FALSE}
knitr::opts_chunk$set(fig.path='Figures/')
```
```{r style, echo = FALSE, results = 'asis'}
BiocStyle::markdown()
```
Load the relevant libraries:
```{r,message=FALSE}
library(ggplot2)
library(reshape2)
library(dplyr)
library(scales)
library(qvalue)
library(xtable)
```
Load the data and the results and add them to the data object:
```{r}
load("BMI_GIANT_GWAS.RData")
tot <- BMI_GIANT_GWAS
load("BMI_GIANT_GWAS_results_logistic.RData")
tot$fitted0.8 <- fitted0.8
tot$fitted0.9 <- fitted0.9
tot$fitted.final.smooth <- fitted.final.smooth
load("BMI_GIANT_GWAS_results_Scott_theoretical.RData")
tot$ScottT <- pi0EstScott
load("BMI_GIANT_GWAS_results_Scott.RData")
tot$ScottE <- pi0EstScott
load("BMI_GIANT_GWAS_bootstrap_CIs_logistic.RData")
dim(tot)
dim(perc.05.95)
head(tot)
head(perc.05.95)
head(rownames(perc.05.95))
identical(as.integer(rownames(perc.05.95)),1:nrow(perc.05.95))
tot$lower.CI <- perc.05.95[,1]
tot$upper.CI <- perc.05.95[,2]
```
Get range of estimates:
```{r}
range(tot$fitted.final.smooth)
range(tot$fitted0.8)
range(tot$fitted0.9)
```
Only use random sample of 50,000 SNPs in plot:
```{r}
##get random sample of 50,000 SNPs
set.seed(310841)
d1 = tot %>% sample_n(5e4)
```
Create long data frame (for ggplot):
```{r}
colnames(d1)[colnames(d1)=="ScottT"] <- "fitted.ScottT"
colnames(d1)[colnames(d1)=="ScottE"] <- "fitted.ScottE"
d3 <- melt(d1,
id.vars=colnames(d1)[-grep("fitted",colnames(d1))],
value.name = "pi0",variable.name = "lambda")
d3$lambda <- as.character(d3$lambda)
d3$lambda[d3$lambda=="fitted0.8"] <- "lambda=0.8"
d3$lambda[d3$lambda=="fitted0.9"] <- "lambda=0.9"
d3$lambda[d3$lambda=="fitted.final.smooth"] <- "final smoothed pi0(x)"
d3$lambda[d3$lambda=="fitted.ScottT"] <- "Scott theoretical"
d3$lambda[d3$lambda=="fitted.ScottE"] <- "Scott empirical"
d3$Freq_MAF_Int_Hapmap <- paste("MAF in", d3$Freq_MAF_Int_Hapmap)
head(d3)
```
Function to change the way labels are displayed:
```{r}
display_thousands <- function(l) {
##divide by 1000
ll <- l/1000
##add k afterwards
lll <- paste(ll,"k",sep="")
lll
}
```
Generate Figure 4:
```{r Fig4,cache=TRUE, fig.width=10, fig.height=3}
ggplot(d3, aes(x=N, y=pi0))+
geom_vline(xintercept=median(tot$N),colour="grey50")+
geom_ribbon(aes(ymin=lower.CI, ymax=upper.CI, group=Freq_MAF_Int_Hapmap),fill="grey50")+
geom_line(aes(linetype=lambda)) +
facet_grid(. ~ Freq_MAF_Int_Hapmap) +
scale_x_continuous(labels=comma) +
ylab("Estimated proportion of nulls") +
scale_linetype_discrete(labels =
c(expression(paste("Final smoothed ",
hat(pi)[0](x))),
expression(paste(hat(pi)[0], ""^lambda,
(x),
" for ", lambda, "=",
0.8)),
expression(paste(hat(pi)[0], ""^lambda,
(x),
" for ", lambda, "=",
0.9)),
"Scott empirical",
"Scott theoretical")) +
theme(axis.line = element_line(colour = "black"),
plot.title = element_text(size = 16, hjust = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.key = element_blank(),
legend.text.align = 0,
legend.title=element_text(size=13),
legend.text=element_text(size=12),
strip.background = element_blank(),
strip.text.x = element_text(size = 12),
axis.text.x = element_text(size=10),
axis.text.y = element_text(size=10))+
##axis.line.x = element_line(color="black", size = 0.5), ##this is to show axes - bug in this version of ggplot2
##axis.line.y = element_line(color="black", size = 0.5)) +
guides(linetype=guide_legend(title="Estimate"))
```
Get FDR for our method:
```{r}
##first get BH q-values
qValsBH <- p.adjust(tot$p, method="BH")
##also get Storey q-values
qValsStorey <- qvalue(tot$p)$qvalues
##what is their difference
head(qValsStorey/qValsBH)
qValsReg <- qValsBH*tot$fitted.final.smooth
tot$qValsBH <- qValsBH
tot$qValsStorey <- qValsStorey
tot$qValsReg <- qValsReg
sum(tot$qValsBH < 0.05)
sum(tot$qValsStorey < 0.05)
sum(tot$qValsReg < 0.05)
sum(FDRScott_emp < 0.05)
sum(FDRScott_theo < 0.05)
mean(tot$qValsBH < 0.05)
mean(tot$qValsStorey < 0.05)
mean(tot$qValsReg < 0.05)
mean(FDRScott_emp < 0.05)
mean(FDRScott_theo < 0.05)
set.seed(310841)
d1 = tot %>% sample_n(5e4)
par(mfrow=c(1,2))
plot(d1$qValsReg ~ d1$qValsStorey, xlim=c(0,1), ylim=c(0,1))
abline(a=0,b=1, col="red", lwd=2)
plot(d1$qValsReg ~ d1$qValsBH, xlim=c(0,1), ylim=c(0,1))
abline(a=0,b=1, col="red", lwd=2)
```
Make nice table for summary results:
```{r}
xtable(data.frame(BL = sum(tot$qValsReg <= 0.05),
Scott_T = sum(FDRScott_theo <= 0.05),
Scott_E = sum(FDRScott_emp <= 0.05),
Storey = sum(tot$qValsStorey <= 0.05),
BH = sum(tot$qValsBH <= 0.05)))
```
length(Reduce(intersect, list(which(tot$qValsReg <= 0.05),
which(FDRScott_theo <= 0.05),
which(FDRScott_emp <= 0.05),
which(tot$qValsStorey <= 0.05),
which(tot$qValsBH <= 0.05))))
length(Reduce(intersect, list(which(tot$qValsReg <= 0.05),
which(tot$qValsStorey <= 0.05),
which(tot$qValsBH <= 0.05))))
length(Reduce(intersect, list(which(FDRScott_theo <= 0.05),
which(FDRScott_emp <= 0.05),
which(tot$qValsBH <= 0.05))))
length(Reduce(intersect, list(which(FDRScott_emp <= 0.05),
which(tot$qValsBH <= 0.05))))
length(Reduce(intersect, list(which(FDRScott_theo <= 0.05),
which(tot$qValsBH <= 0.05))))
length(Reduce(intersect, list(which(tot$qValsStorey <= 0.05),
which(tot$qValsBH <= 0.05))))
length(Reduce(intersect, list(which(tot$qValsStorey <= 0.05),
which(tot$qValsReg <= 0.05))))
length(Reduce(intersect, list(which(FDRScott_theo <= 0.05),
which(tot$qValsBH <= 0.05))))
length(Reduce(intersect, list(which(FDRScott_theo <= 0.05),
which(tot$qValsReg <= 0.05))))
