}
##make correspondence between directory names and names in tables
DirTabCorr <- cbind(c("alt_z_large_20_0.5",##"alt_z_large_20_0.9",
"alt_z_large_10_0.5",##"alt_t_large_10_0.9",
"alt_t_large_20_0.5",##"alt_t_large_20_0.9",
"alt_t_large_10_0.5","alt_t_large_10_0.9"),
c("Norm, 20 blocks, rho=0.5",
##"Norm, 20 blocks, rho=0.9",
"Norm, 10 blocks, rho=0.5",
"Norm, 10 blocks, rho=0.9",
"T, 20 blocks, rho=0.5",
##"T, 20 blocks, rho=0.9",
"T, 10 blocks, rho=0.5"##,
##"T, 10 blocks, rho=0.9"
))
methods <- c("BL","Scott","Scott_emp", "Storey","BH")
for(i in 1:nrow(DirTabCorr))
{
Dir.i <- DirTabCorr[i,1]
Tab.i <- DirTabCorr[i,2]
print(Dir.i)
load(paste(Dir.i,"FDR_TPR_sims.RData",sep="/"))
tabResFDR[tabResFDR$pi0x == "I" & tabResFDR$alts == Tab.i,methods] <-
scen1[methods,"FDR"]
tabResFDR[(tabResFDR$pi0x == "II" & tabResFDR$alts == Tab.i) &
tabResFDR$est == "Linear",methods] <-
scen2a[methods,"FDR"]
tabResFDR[(tabResFDR$pi0x == "II" & tabResFDR$alts == Tab.i) &
tabResFDR$est == "Spline",methods] <-
scen2b[methods,"FDR"]
tabResFDR[(tabResFDR$pi0x == "III" & tabResFDR$alts == Tab.i) &
tabResFDR$est == "Linear",methods] <-
scen3a[methods,"FDR"]
tabResFDR[(tabResFDR$pi0x == "III" & tabResFDR$alts == Tab.i) &
tabResFDR$est == "Spline",methods] <-
scen3b[methods,"FDR"]
tabResFDR[(tabResFDR$pi0x == "IV" & tabResFDR$alts == Tab.i) &
tabResFDR$est == "Linear",methods] <-
scen4a[methods,"FDR"]
tabResFDR[(tabResFDR$pi0x == "IV" & tabResFDR$alts == Tab.i) &
tabResFDR$est == "Spline",methods] <-
scen4b[methods,"FDR"]
}
DirTabCorr <- cbind(c("alt_z_large_20_0.5",##"alt_z_large_20_0.9",
"alt_z_large_10_0.5",##"alt_t_large_10_0.9",
"alt_t_large_20_0.5",##"alt_t_large_20_0.9",
"alt_t_large_10_0.5","alt_t_large_10_0.9"),
c("Norm, 20 blocks, rho=0.5",
##"Norm, 20 blocks, rho=0.9",
"Norm, 10 blocks, rho=0.5",
##"Norm, 10 blocks, rho=0.9",
"T, 20 blocks, rho=0.5",
##"T, 20 blocks, rho=0.9",
"T, 10 blocks, rho=0.5"##,
##"T, 10 blocks, rho=0.9"
))
DirTabCorr <- cbind(c("alt_z_large_20_0.5",##"alt_z_large_20_0.9",
"alt_z_large_10_0.5",##"alt_t_large_10_0.9",
"alt_t_large_20_0.5",##"alt_t_large_20_0.9",
"alt_t_large_10_0.5"),##"alt_t_large_10_0.9"),
c("Norm, 20 blocks, rho=0.5",
##"Norm, 20 blocks, rho=0.9",
"Norm, 10 blocks, rho=0.5",
##"Norm, 10 blocks, rho=0.9",
"T, 20 blocks, rho=0.5",
##"T, 20 blocks, rho=0.9",
"T, 10 blocks, rho=0.5"##,
##"T, 10 blocks, rho=0.9"
))
methods <- c("BL","Scott","Scott_emp", "Storey","BH")
for(i in 1:nrow(DirTabCorr))
{
Dir.i <- DirTabCorr[i,1]
Tab.i <- DirTabCorr[i,2]
print(Dir.i)
load(paste(Dir.i,"FDR_TPR_sims.RData",sep="/"))
tabResFDR[tabResFDR$pi0x == "I" & tabResFDR$alts == Tab.i,methods] <-
scen1[methods,"FDR"]
tabResFDR[(tabResFDR$pi0x == "II" & tabResFDR$alts == Tab.i) &
tabResFDR$est == "Linear",methods] <-
scen2a[methods,"FDR"]
tabResFDR[(tabResFDR$pi0x == "II" & tabResFDR$alts == Tab.i) &
tabResFDR$est == "Spline",methods] <-
scen2b[methods,"FDR"]
tabResFDR[(tabResFDR$pi0x == "III" & tabResFDR$alts == Tab.i) &
tabResFDR$est == "Linear",methods] <-
scen3a[methods,"FDR"]
tabResFDR[(tabResFDR$pi0x == "III" & tabResFDR$alts == Tab.i) &
tabResFDR$est == "Spline",methods] <-
scen3b[methods,"FDR"]
tabResFDR[(tabResFDR$pi0x == "IV" & tabResFDR$alts == Tab.i) &
tabResFDR$est == "Linear",methods] <-
scen4a[methods,"FDR"]
tabResFDR[(tabResFDR$pi0x == "IV" & tabResFDR$alts == Tab.i) &
tabResFDR$est == "Spline",methods] <-
scen4b[methods,"FDR"]
}
for(i in 1:nrow(DirTabCorr))
{
Dir.i <- DirTabCorr[i,1]
Tab.i <- DirTabCorr[i,2]
##print(Dir.i)
load(paste(Dir.i,"FDR_TPR_sims.RData",sep="/"))
tabResFDR[tabResFDR$pi0x == "I" & tabResFDR$alts == Tab.i,methods] <-
scen1[methods,"FDR"]
tabResFDR[(tabResFDR$pi0x == "II" & tabResFDR$alts == Tab.i) &
tabResFDR$est == "Linear",methods] <-
scen2a[methods,"FDR"]
tabResFDR[(tabResFDR$pi0x == "II" & tabResFDR$alts == Tab.i) &
tabResFDR$est == "Spline",methods] <-
scen2b[methods,"FDR"]
tabResFDR[(tabResFDR$pi0x == "III" & tabResFDR$alts == Tab.i) &
tabResFDR$est == "Linear",methods] <-
scen3a[methods,"FDR"]
tabResFDR[(tabResFDR$pi0x == "III" & tabResFDR$alts == Tab.i) &
tabResFDR$est == "Spline",methods] <-
scen3b[methods,"FDR"]
tabResFDR[(tabResFDR$pi0x == "IV" & tabResFDR$alts == Tab.i) &
tabResFDR$est == "Linear",methods] <-
scen4a[methods,"FDR"]
tabResFDR[(tabResFDR$pi0x == "IV" & tabResFDR$alts == Tab.i) &
tabResFDR$est == "Spline",methods] <-
scen4b[methods,"FDR"]
}
for(i in 1:nrow(DirTabCorr))
{
Dir.i <- DirTabCorr[i,1]
Tab.i <- DirTabCorr[i,2]
load(paste(Dir.i,"FDR_TPR_sims.RData",sep="/"))
tabResTPR[tabResTPR$pi0x == "I" & tabResTPR$alts == Tab.i,methods] <-
scen1[methods,"TPR"]
tabResTPR[(tabResTPR$pi0x == "II" & tabResTPR$alts == Tab.i) &
tabResTPR$est == "Linear",methods] <-
scen2a[methods,"TPR"]
tabResTPR[(tabResTPR$pi0x == "II" & tabResTPR$alts == Tab.i) &
tabResTPR$est == "Spline",methods] <-
scen2b[methods,"TPR"]
tabResTPR[(tabResTPR$pi0x == "III" & tabResTPR$alts == Tab.i) &
tabResTPR$est == "Linear",methods] <-
scen3a[methods,"TPR"]
tabResTPR[(tabResTPR$pi0x == "III" & tabResTPR$alts == Tab.i) &
tabResTPR$est == "Spline",methods] <-
scen3b[methods,"TPR"]
tabResTPR[(tabResTPR$pi0x == "IV" & tabResTPR$alts == Tab.i) &
tabResTPR$est == "Linear",methods] <-
scen4a[methods,"TPR"]
tabResTPR[(tabResTPR$pi0x == "IV" & tabResTPR$alts == Tab.i) &
tabResTPR$est == "Spline",methods] <-
scen4b[methods,"TPR"]
}
tabResFDR
setwd("~/Research/FDR regression/Simulations - dependent - revision")
## Load libraries
library(splines)
library(MASS)
library(xtable)
library(dplyr)
##Source functions
source("../functions.R")
tabResFDR <- expand.grid(pi0x = c("I","II","III","IV"),
alts = c("alt_z_large_10_0.5","alt_t_large_10_0.5",
"alt_z_large_20_0.5","alt_t_large_20_0.5",
"alt_z_large_10_0.9","alt_t_large_10_0.9",
"alt_z_large_20_0.9","alt_t_large_20_0.9"),
est = c("Linear", "Spline"))
tabResFDR <- tabResFDR[order(tabResFDR$pi0x, tabResFDR$alts),]
##get rid of pi0x == "I" and est == "Spline"
tabResFDR <- filter(tabResFDR, pi0x != "I" | est != "Spline")
tabResFDR <- cbind(tabResFDR, matrix(NA,nrow=nrow(tabResFDR),ncol=5))
colnames(tabResFDR)[4:8] <- c("BL","Scott","Scott_emp","Storey","BH")
tabResFDR$pi0x <- as.character(tabResFDR$pi0x)
tabResTPR <- tabResFDR
DirTabCorr <- cbind(c("alt_z_large_20_0.5",##"alt_z_large_20_0.9",
"alt_z_large_10_0.5",##"alt_t_large_10_0.9",
"alt_t_large_20_0.5",##"alt_t_large_20_0.9",
"alt_t_large_10_0.5"),##"alt_t_large_10_0.9"),
c("Norm, 20 blocks, rho=0.5",
##"Norm, 20 blocks, rho=0.9",
"Norm, 10 blocks, rho=0.5",
##"Norm, 10 blocks, rho=0.9",
"T, 20 blocks, rho=0.5",
##"T, 20 blocks, rho=0.9",
"T, 10 blocks, rho=0.5"##,
##"T, 10 blocks, rho=0.9"
))
DirTabCorr
methods <- c("BL","Scott","Scott_emp", "Storey","BH")
for(i in 1:nrow(DirTabCorr))
{
Dir.i <- DirTabCorr[i,1]
Tab.i <- DirTabCorr[i,2]
##print(Dir.i)
load(paste(Dir.i,"FDR_TPR_sims.RData",sep="/"))
tabResFDR[tabResFDR$pi0x == "I" & tabResFDR$alts == Tab.i,methods] <-
scen1[methods,"FDR"]
tabResFDR[(tabResFDR$pi0x == "II" & tabResFDR$alts == Tab.i) &
tabResFDR$est == "Linear",methods] <-
scen2a[methods,"FDR"]
tabResFDR[(tabResFDR$pi0x == "II" & tabResFDR$alts == Tab.i) &
tabResFDR$est == "Spline",methods] <-
scen2b[methods,"FDR"]
tabResFDR[(tabResFDR$pi0x == "III" & tabResFDR$alts == Tab.i) &
tabResFDR$est == "Linear",methods] <-
scen3a[methods,"FDR"]
tabResFDR[(tabResFDR$pi0x == "III" & tabResFDR$alts == Tab.i) &
tabResFDR$est == "Spline",methods] <-
scen3b[methods,"FDR"]
tabResFDR[(tabResFDR$pi0x == "IV" & tabResFDR$alts == Tab.i) &
tabResFDR$est == "Linear",methods] <-
scen4a[methods,"FDR"]
tabResFDR[(tabResFDR$pi0x == "IV" & tabResFDR$alts == Tab.i) &
tabResFDR$est == "Spline",methods] <-
scen4b[methods,"FDR"]
}
tabResFDR
Dir.i
load(paste(Dir.i,"FDR_TPR_sims.RData",sep="/"))
tabResFDR[tabResFDR$pi0x == "I" & tabResFDR$alts == Tab.i,methods] <-
scen1[methods,"FDR"]
scen1[methods,"FDR"]
tabResFDR[tabResFDR$pi0x == "I" & tabResFDR$alts == Tab.i,methods]
Tab.i
rm(list=ls())
source("../functions.R")
altsGrid <- as.matrix(expand.grid(dist=c("z","t"),nrBlocks=c(10,20),corr=c(0.5,0.9)))
alts <- apply(altsGrid, 1, function(x){paste("alt",x[1],"large",x[2],x[3],sep="_")})
alts
for(alt in alts)
{
##For each simulation, get the FDR-TPR table: (BL = Boca-Leek method)
scen1 <- scen2a <- scen2b <- scen3a <- scen3b <- NULL
##-------------------Set 1----------------##
##Load p-values and $\pi_0(x)$ estimates for the simulations:
for(l in listSimRes(alt, 1))
{
load(l)
}
##Get BH and Storey q-values for each simulation:
qValuesSimsBH <- getQValuesSimsBH(pValuesSims)
qValuesSimsStorey <- getQValuesSimsStorey(pValuesSims)
##Get estimated FDR for each simulation for the final estimates
FDRreg <- getFDRregSims(pi0EstSim, qValuesSimsBH)
##get FDR-TPR table
scen1 <- estFDR.TPR(FDR.BL = FDRreg,
FDR.BH = qValuesSimsBH, FDR.Storey = qValuesSimsStorey,
FDR.Scott = FDR.ScottMat, FDR.Scott_emp = FDR.ScottMat_emp, nullHypSims)
##-------------------Set 2----------------##
##Load p-values and $\pi_0(x)$ estimates for the simulations:
for(l in listSimRes(alt, 2))
{
load(l)
}
##Get BH and Storey q-values for each simulation:
qValuesSimsBH <- getQValuesSimsBH(pValuesSims)
qValuesSimsStorey <- getQValuesSimsStorey(pValuesSims)
##--------Linear fit-------##
##Get estimated FDR for each simulation for the final estimates
FDRreg <- getFDRregSims(pi0EstSim.lin, qValuesSimsBH)
##get FDR-TPR table
scen2a <- estFDR.TPR(FDR.BL = FDRreg,
FDR.BH = qValuesSimsBH, FDR.Storey = qValuesSimsStorey,
FDR.Scott = FDR.Lin.ScottMat, FDR.Scott_emp = FDR.Lin.ScottMat_emp, nullHypSims)
##--------Spline fit-------##
##Get estimated FDR for each simulation for the final estimates
FDRreg <- getFDRregSims(pi0EstSim.spl, qValuesSimsBH)
##get FDR-TPR table
scen2b <- estFDR.TPR(FDR.BL = FDRreg,
FDR.BH = qValuesSimsBH, FDR.Storey = qValuesSimsStorey,
FDR.Scott = FDR.Spl.ScottMat, FDR.Scott_emp = FDR.Spl.ScottMat_emp, nullHypSims)
##-------------------Set 3----------------##
##Load p-values and $\pi_0(x)$ estimates for the simulations:
for(l in listSimRes(alt, 3))
{
load(l)
}
##Get BH and Storey q-values for each simulation:
qValuesSimsBH <- getQValuesSimsBH(pValuesSims)
qValuesSimsStorey <- getQValuesSimsStorey(pValuesSims)
##--------Linear fit-------##
##Get estimated FDR for each simulation for the final estimates
FDRreg <- getFDRregSims(pi0EstSim.lin, qValuesSimsBH)
##get FDR-TPR table
scen3a <- estFDR.TPR(FDR.BL = FDRreg,
FDR.BH = qValuesSimsBH, FDR.Storey = qValuesSimsStorey,
FDR.Scott = FDR.Lin.ScottMat, FDR.Scott_emp = FDR.Lin.ScottMat_emp, nullHypSims)
##--------Spline fit-------##
##Get estimated FDR for each simulation for the final estimates
FDRreg <- getFDRregSims(pi0EstSim.spl, qValuesSimsBH)
##get FDR-TPR table
scen3b <- estFDR.TPR(FDR.BL = FDRreg,
FDR.BH = qValuesSimsBH, FDR.Storey = qValuesSimsStorey,
FDR.Scott = FDR.Spl.ScottMat, FDR.Scott_emp = FDR.Spl.ScottMat_emp, nullHypSims)
##-------------------Set 4----------------##
##Load p-values and $\pi_0(x)$ estimates for the simulations:
for(l in listSimRes(alt, 4))
{
load(l)
}
##Get BH and Storey q-values for each simulation:
qValuesSimsBH <- getQValuesSimsBH(pValuesSims)
qValuesSimsStorey <- getQValuesSimsStorey(pValuesSims)
##--------Linear fit-------##
##Get estimated FDR for each simulation:
##first pull out just the final estimates
pi0_final <- lapply(pi0EstSim.lin, function(x){x[[3]]})
FDRreg <- t(mapply(function(q,pi0){q*pi0}, data.frame(t(qValuesSimsBH)), pi0_final, SIMPLIFY=TRUE))
##get FDR-TPR table
scen4a <- estFDR.TPR(FDR.BL = FDRreg,
FDR.BH = qValuesSimsBH, FDR.Storey = qValuesSimsStorey,
FDR.Scott = FDR.Lin.ScottMat, FDR.Scott_emp = FDR.Lin.ScottMat_emp, nullHypSims)
##--------Spline fit-------##
##Get estimated FDR for each simulation:
##first pull out just the final estimates
pi0_final <- lapply(pi0EstSim.spl, function(x){x[[3]]})
FDRreg <- t(mapply(function(q,pi0){q*pi0}, data.frame(t(qValuesSimsBH)), pi0_final, SIMPLIFY=TRUE))
##get FDR-TPR table
scen4b <- estFDR.TPR(FDR.BL = FDRreg,
FDR.BH = qValuesSimsBH, FDR.Storey = qValuesSimsStorey,
FDR.Scott = FDR.Spl.ScottMat, FDR.Scott_emp = FDR.Spl.ScottMat_emp, nullHypSims)
print("")
print(alt)
print(scen1)
print(scen2a)
print(scen2b)
print(scen3a)
print(scen3b)
print(scen4a)
print(scen4b)
save(list=c("scen1","scen2a","scen2b","scen3a","scen3b","scen4a","scen4b"),
file=paste(alt,"FDR_TPR_sims.RData",sep="/"))
}
library(splines)
library(MASS)
library(xtable)
library(qvalue)
for(alt in alts)
{
##For each simulation, get the FDR-TPR table: (BL = Boca-Leek method)
scen1 <- scen2a <- scen2b <- scen3a <- scen3b <- NULL
##-------------------Set 1----------------##
##Load p-values and $\pi_0(x)$ estimates for the simulations:
for(l in listSimRes(alt, 1))
{
load(l)
}
##Get BH and Storey q-values for each simulation:
qValuesSimsBH <- getQValuesSimsBH(pValuesSims)
qValuesSimsStorey <- getQValuesSimsStorey(pValuesSims)
##Get estimated FDR for each simulation for the final estimates
FDRreg <- getFDRregSims(pi0EstSim, qValuesSimsBH)
##get FDR-TPR table
scen1 <- estFDR.TPR(FDR.BL = FDRreg,
FDR.BH = qValuesSimsBH, FDR.Storey = qValuesSimsStorey,
FDR.Scott = FDR.ScottMat, FDR.Scott_emp = FDR.ScottMat_emp, nullHypSims)
##-------------------Set 2----------------##
##Load p-values and $\pi_0(x)$ estimates for the simulations:
for(l in listSimRes(alt, 2))
{
load(l)
}
##Get BH and Storey q-values for each simulation:
qValuesSimsBH <- getQValuesSimsBH(pValuesSims)
qValuesSimsStorey <- getQValuesSimsStorey(pValuesSims)
##--------Linear fit-------##
##Get estimated FDR for each simulation for the final estimates
FDRreg <- getFDRregSims(pi0EstSim.lin, qValuesSimsBH)
##get FDR-TPR table
scen2a <- estFDR.TPR(FDR.BL = FDRreg,
FDR.BH = qValuesSimsBH, FDR.Storey = qValuesSimsStorey,
FDR.Scott = FDR.Lin.ScottMat, FDR.Scott_emp = FDR.Lin.ScottMat_emp, nullHypSims)
##--------Spline fit-------##
##Get estimated FDR for each simulation for the final estimates
FDRreg <- getFDRregSims(pi0EstSim.spl, qValuesSimsBH)
##get FDR-TPR table
scen2b <- estFDR.TPR(FDR.BL = FDRreg,
FDR.BH = qValuesSimsBH, FDR.Storey = qValuesSimsStorey,
FDR.Scott = FDR.Spl.ScottMat, FDR.Scott_emp = FDR.Spl.ScottMat_emp, nullHypSims)
##-------------------Set 3----------------##
##Load p-values and $\pi_0(x)$ estimates for the simulations:
for(l in listSimRes(alt, 3))
{
load(l)
}
##Get BH and Storey q-values for each simulation:
qValuesSimsBH <- getQValuesSimsBH(pValuesSims)
qValuesSimsStorey <- getQValuesSimsStorey(pValuesSims)
##--------Linear fit-------##
##Get estimated FDR for each simulation for the final estimates
FDRreg <- getFDRregSims(pi0EstSim.lin, qValuesSimsBH)
##get FDR-TPR table
scen3a <- estFDR.TPR(FDR.BL = FDRreg,
FDR.BH = qValuesSimsBH, FDR.Storey = qValuesSimsStorey,
FDR.Scott = FDR.Lin.ScottMat, FDR.Scott_emp = FDR.Lin.ScottMat_emp, nullHypSims)
##--------Spline fit-------##
##Get estimated FDR for each simulation for the final estimates
FDRreg <- getFDRregSims(pi0EstSim.spl, qValuesSimsBH)
##get FDR-TPR table
scen3b <- estFDR.TPR(FDR.BL = FDRreg,
FDR.BH = qValuesSimsBH, FDR.Storey = qValuesSimsStorey,
FDR.Scott = FDR.Spl.ScottMat, FDR.Scott_emp = FDR.Spl.ScottMat_emp, nullHypSims)
##-------------------Set 4----------------##
##Load p-values and $\pi_0(x)$ estimates for the simulations:
for(l in listSimRes(alt, 4))
{
load(l)
}
##Get BH and Storey q-values for each simulation:
qValuesSimsBH <- getQValuesSimsBH(pValuesSims)
qValuesSimsStorey <- getQValuesSimsStorey(pValuesSims)
##--------Linear fit-------##
##Get estimated FDR for each simulation:
##first pull out just the final estimates
pi0_final <- lapply(pi0EstSim.lin, function(x){x[[3]]})
FDRreg <- t(mapply(function(q,pi0){q*pi0}, data.frame(t(qValuesSimsBH)), pi0_final, SIMPLIFY=TRUE))
##get FDR-TPR table
scen4a <- estFDR.TPR(FDR.BL = FDRreg,
FDR.BH = qValuesSimsBH, FDR.Storey = qValuesSimsStorey,
FDR.Scott = FDR.Lin.ScottMat, FDR.Scott_emp = FDR.Lin.ScottMat_emp, nullHypSims)
##--------Spline fit-------##
##Get estimated FDR for each simulation:
##first pull out just the final estimates
pi0_final <- lapply(pi0EstSim.spl, function(x){x[[3]]})
FDRreg <- t(mapply(function(q,pi0){q*pi0}, data.frame(t(qValuesSimsBH)), pi0_final, SIMPLIFY=TRUE))
##get FDR-TPR table
scen4b <- estFDR.TPR(FDR.BL = FDRreg,
FDR.BH = qValuesSimsBH, FDR.Storey = qValuesSimsStorey,
FDR.Scott = FDR.Spl.ScottMat, FDR.Scott_emp = FDR.Spl.ScottMat_emp, nullHypSims)
print("")
print(alt)
print(scen1)
print(scen2a)
print(scen2b)
print(scen3a)
print(scen3b)
print(scen4a)
print(scen4b)
save(list=c("scen1","scen2a","scen2b","scen3a","scen3b","scen4a","scen4b"),
file=paste(alt,"FDR_TPR_sims.RData",sep="/"))
}
alt
alts
##For each simulation, get the FDR-TPR table: (BL = Boca-Leek method)
scen1 <- scen2a <- scen2b <- scen3a <- scen3b <- NULL
##-------------------Set 1----------------##
##Load p-values and $\pi_0(x)$ estimates for the simulations:
for(l in listSimRes(alt, 1))
{
load(l)
}
##Get BH and Storey q-values for each simulation:
qValuesSimsBH <- getQValuesSimsBH(pValuesSims)
qValuesSimsStorey <- getQValuesSimsStorey(pValuesSims)
##Get estimated FDR for each simulation for the final estimates
FDRreg <- getFDRregSims(pi0EstSim, qValuesSimsBH)
##get FDR-TPR table
scen1 <- estFDR.TPR(FDR.BL = FDRreg,
FDR.BH = qValuesSimsBH, FDR.Storey = qValuesSimsStorey,
FDR.Scott = FDR.ScottMat, FDR.Scott_emp = FDR.ScottMat_emp, nullHypSims)
qValuesSimsStorey <- getQValuesSimsStorey(pValuesSims)
dim(pValuesSims)
qValuesSimsStorey <- getQValuesSimsStorey(pValuesSims[1:100,])
qValuesSimsStorey <- getQValuesSimsStorey(pValuesSims[1:150,])
qValuesSimsStorey <- getQValuesSimsStorey(pValuesSims[1:125,])
qValuesSimsStorey <- getQValuesSimsStorey(pValuesSims[1:112,])
qValuesSimsStorey <- getQValuesSimsStorey(pValuesSims[1:120,])
qValuesSimsStorey <- getQValuesSimsStorey(pValuesSims[1:115,])
qValuesSimsStorey <- getQValuesSimsStorey(pValuesSims[1:116,])
pValuesSims[116,]
hist(pValuesSims[116,])
q <- qvalue(pValuesSims[116,])$qvalues
q <- qvalue(pValuesSims[116,])
range(pValuesSims)
range(pValuesSims[116,])
try(q <- qvalue(pValuesSims[116,]))
tryCatch(q <- qvalue(pValuesSims[116,]))
?tryCatch
tryCatch(q <- qvalue(pValuesSims[116,]), finally=NA)
class(tryCatch(q <- qvalue(pValuesSims[116,]), finally=NA))
mode(tryCatch(q <- qvalue(pValuesSims[116,]), finally=NA))
class(try(q <- qvalue(pValuesSims[116,])))
class(try(q <- qvalue(pValuesSims[115,])))
class(try(q <- qvalue(pValuesSims[116,]), silent=TRUE))
getQValuesSimsStorey <- function(pValuesSims)
{
t(apply(pValuesSims, 1, function(p){try(qvalue(p)$qvalues, silent=TRUE)}))
}
qValuesSimsStorey <- getQValuesSimsStorey(pValuesSims)
class(qValuesSimsStorey)
dim(qValuesSimsStorey)
qValuesSimsStorey[1,1:10]
getQValuesSimsStorey <- function(pValuesSims)
{
t(apply(pValuesSims, 1, function(p){try(qvalue(p)$qvalues, silent=TRUE)}))
}
qValuesSimsStorey <- getQValuesSimsStorey(pValuesSims[115:116,])
qValuesSimsStorey
getQValuesSimsStorey <- function(pValuesSims)
{
t(apply(pValuesSims, 1, function(p){t <- try(qvalue(p)$qvalues, silent=TRUE);
if(mode(t)!="numeric"){t <- rep(NA, length=length(p))}; t}))
}
qValuesSimsStorey <- getQValuesSimsStorey(pValuesSims[115:116,])
qValuesStorey
qValuesSimsStorey
class(qValuesSimsStorey)
dim(qValuesSimsStorey)
qValuesSimsStorey[1:5,]
qValuesSimsStorey[,1:5]
qValuesSimsStorey <- getQValuesSimsStorey(pValuesSims)
q <- rowSums(qValuesSimsStorey)
sum(is.na(q))
source('~/Research/FDR regression/functions.R')
