\documentclass{article}

\begin{document}

<<setup, include=FALSE, cache=FALSE>>=
# this is equivalent to \SweaveOpts{...}
opts_chunk$set(fig.path='Figures/', fig.align='center', fig.show='hold')
options(replace.assign=TRUE,width=60)
@

<<prelims>>=
## Load libraries
library(splines)
library(MASS)
library(FDRreg)
library(curl)

library(doParallel) ##to make cluster (on Windows)
library(foreach) ##to use foreach function that does the parallel processing
library(doRNG) ##for reproducible seeds when doing parallel processing

##Source functions
source("../functions.R")

options(warn=1)
@

Define nulltype for Scott method:
<<>>=
nulltype <- "empirical"
@

Simulations are performed for a variety of alternative distributions:
<<>>=
altsGrid <- as.matrix(expand.grid(dist=c("z","t"),nrBlocks=c(10,20),corr=c(0.2,0.5,0.9)))
alts <- apply(altsGrid, 1, function(x){paste("alt",x[1],"large",x[2],x[3],sep="_")})
alts
@

\section{Probability of being a false positive is linear}

Perform estimation and save estimates:

<<>>=
set.seed(880184)

for(alt in alts)
{
  print(alt)
  
  load(paste(alt,"simResults_5.RData",sep="/"))
  ntest <- ncol(zValuesSims)

  pi0hatScottMat_emp <- estimate_Scott_sims(zValuesSims, tme, nulltype)

  pi0hatScottMean_emp <- colMeans(pi0hatScottMat_emp[,1:ntest])
  pi0hatScottVar_emp <- apply(pi0hatScottMat_emp[,1:ntest],2,var)
  
  pi0hat.ScottMat_emp <- pi0hatScottMat_emp[,1:ntest]
  FDR.ScottMat_emp <- pi0hatScottMat_emp[,(ntest+1):(2*ntest)]
  
  ##save full results
  save(file=paste(alt,"simResults_pi0x_Scott_emp_5_full.RData",sep="/"), 
       list=c("pi0hat.ScottMat_emp", "FDR.ScottMat_emp"))
  
  ##save summary results
  save(file=paste(alt,"simResults_pi0x_Scott_emp_5.RData",sep="/"), 
       list=c("tme", "pi0", 
            "pi0hatScottMean_emp","pi0hatScottVar_emp"))
}
@


Session info:
<<sessInf>>=
devtools::session_info()
@

\end{document}
