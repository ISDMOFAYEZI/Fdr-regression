}else{
x <- xall[bestUsePoint : bestEndPoint];
y <- yall[bestUsePoint : bestEndPoint];
w <- 1/y;
fit <- lm(y~x, weights = w);
mCoef <- coef(summary(fit));
mResidual <- c(TotalPoint);
for (i in 1: TotalPoint){
mResidual[i] <- (yall[i]-(xall[i]*mCoef[2,1]+mCoef[1,1]))/(yall[i]+(xall[i]*mCoef[2,1]+mCoef[1,1]));
}
usedPoints = bestEndPoint - bestUsePoint + 1;
Rsquare <-summary(fit)$r.squared;
list(mCoef=mCoef, mResidual=mResidual, Rsquare=Rsquare, usedPoints = usedPoints)
}
}
100/10^6
1/10000
3+1/3*3+1/3^2*2+1/3^3*4
2+1/3*4+1/3^2*4
choose(6,2)
(3/4+3/5+3/6)/15
(3/4+3/5+3/6)
4.37037*3
3.777778*3
(3+1/3*3+1/3^2*2+1/3^3*4)*3
(1-0.25^5)/0.75
(1-0.25^5)/0.75/2
(1-0.25^4)/0.75
(1-0.25^4)/0.75/2
2+0.25+0.25^2
2.3125/1.329
2.3125/1.328
1.1/0.63
13/4.37037
11/3.777778
2.5/2.3125
1.3/1.1
m=20
t=100
,
,
50*0.75^4
762+27+47
getwd()
x <- rnorm(1000)
u <- pnorm(x)
hist(u)
## Set up the time vector and the probability of being null
tme <- seq(-1,2,length=ntest)
pi0 <- pnorm(tme)
ntest <- 1000
## Set up the time vector and the probability of being null
tme <- seq(-1,2,length=ntest)
pi0 <- pnorm(tme)
ntest <- length(pi0)
nullI <- rbinom(ntest,prob=pi0,size=1)> 0
n1 <- floor(ntest/2)
##simulate means
mu <- c(rnorm(n1,3,1),rnorm(ntest-n1,-3,1))
mu[nullI == 1] <- 0
zValues <- rnorm(ntest, mu, 1)
hist(zValues)
hist(zValues[nullI==1])
hist(zValues[nullI==0])
pValues <- pnorm(zValues)
hist(pValues[nullI==1])
hist(pValues[nullI==0])
pValues <- 1-2*pnorm(abs(zValues))
hist(pValues[nullI==0])
hist(pValues[nullI==1])
pValues <- 2*pnorm(abs(zValues))-1
hist(pValues[nullI==1])
hist(pValues[nullI==0])
2*(1-pnorm(1.96))
pValues <- 2*(1-pnorm(abs(zValues)))
hist(pValues[nullI==1])
hist(pValues[nullI==0])
zValues <- rnorm(1000)
pValues <- 2*(1-pnorm(abs(zValues)))
hist(pValues)
zValues <- rnorm(1000)
pValues <- 2*(1-pnorm(abs(zValues)))
hist(pValues)
rbeta(1000,1,2)
hist(rbeta(1000,1,2))
ntest=1000
tme <- seq(-1,2,length=ntest)
pi0 <- 1/4*tme+1/2
ntest <- length(pi0)
nullI <- rbinom(ntest,prob=pi0,size=1)> 0
n1 <- floor(ntest/2)
##simulate means
mu <- c(rnorm(n1,3,1),rnorm(ntest-n1,-3,1))
##mu <- c(rnorm(n1,2,1),rnorm(ntest-n1,-2,1))
mu[nullI == 1] <- 0
zValues <- rnorm(ntest, mu, 1)
pValues <- 2*(1-pnorm(abs(zValues)))
hist(pValues[!nullI])
hist(rbeta(1000,1,20))
hist(rbeta(1000,1,2))
hist(pValues[!nullI])
hist(rbeta(1000,1,20))
?rrt
?rt
zValues <- rt(ntest, mu, 5)
pValues <- 2*(1-pnorm(abs(zValues)))
zValues <- rt(ntest, 5, mu)
?eigen
T <- cbind(c(0.2,0.8,0.8),c(0.4,0.2,0),c(0.4,0,0.2))
T
eigen(T)
library(readr)
install.packages(c("readr","Hmisc","fdrtool"))
library(readr)
library(dplyr)
library(fdrtool)
library(betareg)
load("BMI_GIANT_GWAS.RData")
set.seed(310841)
d1 = tot %>% sample_n(5e4)
tot <- BMI_GIANT_GWAS
set.seed(310841)
d1 = tot %>% sample_n(5e4)
head(tot)
plot(d1$Freq_MAF_Hapmap ~ d1$N)
plot(d1$Freq_MAF_Int_Hapmap ~ d1$N)
boxplot(d1$N ~ d1$Freq_MAF_Int_Hapmap)
X <- model.matrix(~ splines::ns(N,5) + Freq_MAF_Int_Hapmap, data = tot)[,-1]
dim(X)
head(X)
abline(v=median(dd1$N), col="red")
abline(v=median(d1$N), col="red")
plot(d1$Freq_MAF_Int_Hapmap ~ d1$N)
plot(d1$Freq_MAF_Hapmap ~ d1$N)
abline(v=median(d1$N), col="red")
head(tot)
median(d1$N)/max(d1$N)
length(NULL)
genPvalsIndChisq <- function(pi0, muAlt, r=2, c=2)
{
ntest <- length(pi0)
nullI <- rbinom(ntest,prob=pi0,size=1)> 0
n1 <- floor(ntest/2)
##simulate means
mu <- c(rnorm(n1,muAlt,1),rnorm(ntest-n1,-muAlt,1))
mu[nullI == 1] <- 0
chisqValues <- rep(NA, ntest)
df.chisq <- (r-1)*(c-1)
for(i in 1:ntest)
{
chisqValues[i] <- rchisq(1, df=df.chisq, ncp=mu[i])
}
pValues <- 1-pchisq(chisqValues, df=df.chisq)
zValues <- qnorm(1-pValues/2)
list(zValues=zValues, pValues=pValues, null=nullI)
}
p <- genpValsIndChisq(rep(0.9,1000), 9)
p <- genPValsIndChisq(rep(0.9,1000), 9)
p <- genPvalsIndChisq(rep(0.9,1000), 9)
warnings()
pi0 <- rep(0.9, 1000)
muAlt <- 9
r=2
c=2
ntest <- length(pi0)
nullI <- rbinom(ntest,prob=pi0,size=1)> 0
n1 <- floor(ntest/2)
##simulate means
mu <- c(rnorm(n1,muAlt,1),rnorm(ntest-n1,-muAlt,1))
mu[nullI == 1] <- 0
mean(mu)
sum(nullI)
hist(mu)
sum(mu==0)
genPvalsIndChisq <- function(pi0, muAlt, r=2, c=2)
{
ntest <- length(pi0)
nullI <- rbinom(ntest,prob=pi0,size=1)> 0
n1 <- floor(ntest/2)
##simulate means
mu <- abs(c(rnorm(n1,muAlt,1),rnorm(ntest-n1,-muAlt,1)))
mu[nullI == 1] <- 0
chisqValues <- rep(NA, ntest)
df.chisq <- (r-1)*(c-1)
for(i in 1:ntest)
{
chisqValues[i] <- rchisq(1, df=df.chisq, ncp=mu[i])
}
pValues <- 1-pchisq(chisqValues, df=df.chisq)
zValues <- qnorm(1-pValues/2)
list(zValues=zValues, pValues=pValues, null=nullI)
}
p <- genPvalsIndChisq(rep(0.9,1000),9)
hist(p)
hist(p$pValues)
2*2
install.packages("Hmisc")
library(readr)
library(dplyr)
library(fdrtool)
library(betareg)
library(splines)
library(Hmisc)
install.packages("scales")
)
library(ggplot2)
library(reshape2)
library(FDRreg)
4.8+1.2+1.68
4.8+1.2+1.68+3.6
4.8+1.2+1.68+1.2
setwd("~/Research/FDR regression/Simulations - independent - revision")
library(splines)
library(MASS)
library(swfdr)
library(doParallel) ##to make cluster (on Windows)
library(foreach) ##to use foreach function that does the parallel processing
library(doRNG) ##for reproducible seeds when doing parallel processing
##don't need doRNG here, but easier to keep it in
##Source functions
source("../functions.R")
lm_pi0()
lm_pi0
alt="alt_veta"
alt="alt_beta"
source('~/Research/FDR regression/functions.R')
scen1 <- scen2a <- scen2b <- scen3a <- scen3b <- NULL
for(l in listSimRes(alt, 1))
{
load(l)
}
load(paste(alt,"simResults_1.RData",sep="/"))
source('~/Research/FDR regression/functions.R')
load(paste(alt,"simResults_1.RData",sep="/"))
pi0EstSim <- estimate_pi0x_sims(pValuesSims, tme)
##pull out means and variances of estimates at lambda=0.8, lambda=0.9, and final estimate
pi0MeansVars <- pullMeansVars(pi0EstSim)
##save full results
save(file=paste(alt,"simResults_pi0x_thresh_1_full.RData",sep="/"),
list=c("pi0EstSim"))
##save summary results
save(file=paste(alt,"simResults_pi0x_thresh_1.RData",sep="/"),
list=c("tme", "pi0", "pi0MeansVars"))
pullMeansVars <- function(pi0EstSim)
{
##pull out estimates at lambda=0.8, lambda=0.9, and final estimate
pi0hat0.8 <- sapply(pi0EstSim, function(x){x[[1]]})
pi0hat0.9 <- sapply(pi0EstSim, function(x){x[[2]]})
pi0hatFinal <- sapply(pi0EstSim, function(x){x[[3]]})
##get means across simulations
pi0hatMean0.8 <- rowMeans(pi0hat0.8)
pi0hatMean0.9 <- rowMeans(pi0hat0.9)
pi0hatMeanFinal <- rowMeans(pi0hatFinal)
##also get variances across simulations
pi0hatVar0.8 <- apply(pi0hat0.8,1,var)
pi0hatVar0.9 <- apply(pi0hat0.9,1,var)
pi0hatVarFinal <- apply(pi0hatFinal,1,var)
return(list(pi0hatMean0.8=pi0hatMean0.8,
pi0hatMean0.9=pi0hatMean0.9,
pi0hatMeanFinal=pi0hatMeanFinal,
pi0hatVar0.8=pi0hatVar0.8,
pi0hatVar0.9=pi0hatVar0.9,
pi0hatVarFinal=pi0hatVarFinal))
}
load(paste(alt,"simResults_1.RData",sep="/"))
pi0EstSim <- estimate_pi0x_sims(pValuesSims, tme)
##pull out means and variances of estimates at lambda=0.8, lambda=0.9, and final estimate
pi0MeansVars <- pullMeansVars(pi0EstSim)
##save full results
save(file=paste(alt,"simResults_pi0x_thresh_1_full.RData",sep="/"),
list=c("pi0EstSim"))
##save summary results
save(file=paste(alt,"simResults_pi0x_thresh_1.RData",sep="/"),
list=c("tme", "pi0", "pi0MeansVars"))
source('~/Research/FDR regression/functions.R')
load(paste(alt,"simResults_1.RData",sep="/"))
pi0EstSim <- estimate_pi0x_sims(pValuesSims, tme)
##pull out means and variances of estimates at lambda=0.8, lambda=0.9, and final estimate
pi0MeansVars <- pullMeansVars(pi0EstSim)
##save full results
save(file=paste(alt,"simResults_pi0x_thresh_1_full.RData",sep="/"),
list=c("pi0EstSim"))
##save summary results
save(file=paste(alt,"simResults_pi0x_thresh_1.RData",sep="/"),
list=c("tme", "pi0", "pi0MeansVars"))
lm_pi0
?foreach
source('~/Research/FDR regression/functions.R')
pi0EstSim <- estimate_pi0x_sims(pValuesSims, tme)
##pull out means and variances of estimates at lambda=0.8, lambda=0.9, and final estimate
pi0MeansVars <- pullMeansVars(pi0EstSim)
##save full results
save(file=paste(alt,"simResults_pi0x_thresh_1_full.RData",sep="/"),
list=c("pi0EstSim"))
##save summary results
save(file=paste(alt,"simResults_pi0x_thresh_1.RData",sep="/"),
list=c("tme", "pi0", "pi0MeansVars"))
for(alt in alts)
{
load(paste(alt,"simResults_1.RData",sep="/"))
pi0EstSim <- estimate_pi0x_sims(pValuesSims, tme)
##pull out means and variances of estimates at lambda=0.8, lambda=0.9, and final estimate
pi0MeansVars <- pullMeansVars(pi0EstSim)
##save full results
save(file=paste(alt,"simResults_pi0x_thresh_1_full.RData",sep="/"),
list=c("pi0EstSim"))
##save summary results
save(file=paste(alt,"simResults_pi0x_thresh_1.RData",sep="/"),
list=c("tme", "pi0", "pi0MeansVars"))
}
alts <- c("alt_beta","alt_chisq_large_3_3","alt_chisq_large",
"alt_chisq_small_3_3","alt_chisq_small",
"alt_t_large","alt_t_small",
"alt_z_large",
"alt_z_small")
for(alt in alts)
{
load(paste(alt,"simResults_1.RData",sep="/"))
pi0EstSim <- estimate_pi0x_sims(pValuesSims, tme)
##pull out means and variances of estimates at lambda=0.8, lambda=0.9, and final estimate
pi0MeansVars <- pullMeansVars(pi0EstSim)
##save full results
save(file=paste(alt,"simResults_pi0x_thresh_1_full.RData",sep="/"),
list=c("pi0EstSim"))
##save summary results
save(file=paste(alt,"simResults_pi0x_thresh_1.RData",sep="/"),
list=c("tme", "pi0", "pi0MeansVars"))
}
estimate_pi0x_sims
lm_pi0
nSims <- nrow(pValuesSims)
ntest <- ncol(pValuesSims)
##sequence of lambdas
lambdas <- round(seq(0.05, 0.95, 0.05),2)
which.0.8 <- which(lambdas==0.8)
which.0.9 <- which(lambdas==0.9)
dim(X)
X=tme
##if X is a vector, change it into a matrix
if(is.null(dim(X)))
{
X <- matrix(X, ncol=1)
}
dim(X)
sim=1
res <- lm_pi0(pValuesSims[sim,], lambda=lambdas, X=X,
smooth.df=3, threshold=TRUE);
res.pi0.lambda <- res$pi0.lambda;
head(res.pi0.lambda[,which.0.8])
library(swfdr)
res <- lm_pi0(pValuesSims[sim,], lambda=lambdas, X=X,
smooth.df=3, threshold=TRUE);
res.pi0.lambda <- res$pi0.lambda;
head(res.pi0.lambda[,which.0.8])
lm_pi0
nSims <- nrow(pValuesSims)
ntest <- ncol(pValuesSims)
##sequence of lambdas
lambdas <- round(seq(0.05, 0.95, 0.05),2)
which.0.8 <- which(lambdas==0.8)
which.0.9 <- which(lambdas==0.9)
lambda=lambdas
smooth.df=3
threshold=TRUE
##if X is a vector, change it into a matrix
if(is.null(dim(X)))
{
X <- matrix(X, ncol=1)
}
##number of tests
n <- nrow(X)
##number of lambdas
nLambda <- length(lambda)
##sort lambdas from smallest to largest and take only unique values
lambda <- sort(unique(lambda))
##make a design matrix with the intercept
Xint <- cbind(1, X)
##get the estimate for each value of lambda
pi0.lambda <- matrix(NA, nrow=n, ncol=nLambda)
i=1
lambda.i <- lambda[i]
y <- pValues > lambda.i
pValues=pValuesSims[1,]
y <- pValues > lambda.i
regFit <- glm(y ~ X, family=binomial)
regFit <- lsfit(X, y)
pi0.lambda[,i] <- (Xint %*% matrix(regFit$coefficients, ncol=1))[,1]/(1-lambda.i)
regFitOld <- regFit
pi0.lambda.iOld <- pi0.lambda[,i]
regFit <- glm(y ~ X, family=binomial)
pi0.lambda[,i] <- regFit$fitted.values/(1-lambda.i)
identical(pi0.lambda.iOld, pi0.lambda[,i])
plot(pi0.lambda.iOld, pi0.lambda[,i])
abline(0,1)
abline(0,1,col="red")
pi0.lambda <- matrix(NA, nrow=n, ncol=nLambda)
for(i in 1:nLambda)
{
lambda.i <- lambda[i]
y <- pValues > lambda.i
##fit regression
regFit <- lsfit(X, y)
##get the estimated values of pi0
pi0.lambda[,i] <- (Xint %*% matrix(regFit$coefficients, ncol=1))[,1]/(1-lambda.i)
if(threshold){
pi0.lambda[,i] <- ifelse(pi0.lambda[,i] > 1, 1, pi0.lambda[,i])
pi0.lambda[,i] <- ifelse(pi0.lambda[,i] < 0, 0, pi0.lambda[,i])
}
}
pi0.lambdaOld <- pi0.lambda
##get the estimate for each value of lambda
pi0.lambda <- matrix(NA, nrow=n, ncol=nLambda)
for(i in 1:nLambda)
{
lambda.i <- lambda[i]
y <- pValues > lambda.i
##fit regression
regFit <- glm(y ~ X, family=binomial)
##get the estimated values of pi0
pi0.lambda[,i] <- regFit$fitted.values/(1-lambda.i)
if(threshold){
pi0.lambda[,i] <- ifelse(pi0.lambda[,i] > 1, 1, pi0.lambda[,i])
pi0.lambda[,i] <- ifelse(pi0.lambda[,i] < 0, 0, pi0.lambda[,i])
}
}
pi0.lambda[1:5,1:5]
pi0.lambdaOld[1:5,1:5]
##smooth over values of lambda (do this for each test in part)
pi0.smooth <- matrix(NA, nrow=n, ncol=nLambda)
##also save final estimate (maximum of 0 and minimum of 1 and smoothed value at largest lambda)
pi0 <- rep(NA, length=n)
for(i in 1:n)
{
if(i %% 10000==0)
{
message(paste("At test #:",i))
}
spi0 <- smooth.spline(lambda, pi0.lambdaOld[i,], df=smooth.df)
pi0.smooth[i, ] <- spi0$y
pi0[i] <- pi0.smooth[i,nLambda]
}
pi0.smoothOld <- pi0.smooth
pi0Old <- pi0
##smooth over values of lambda (do this for each test in part)
pi0.smooth <- matrix(NA, nrow=n, ncol=nLambda)
##also save final estimate (maximum of 0 and minimum of 1 and smoothed value at largest lambda)
pi0 <- rep(NA, length=n)
for(i in 1:n)
{
if(i %% 10000==0)
{
message(paste("At test #:",i))
}
spi0 <- smooth.spline(lambda, pi0.lambda[i,], df=smooth.df)
pi0.smooth[i, ] <- spi0$y
pi0[i] <- pi0.smooth[i,nLambda]
}
##smooth over values of lambda (do this for each test in part)
pi0.smooth <- matrix(NA, nrow=n, ncol=nLambda)
##also save final estimate (maximum of 0 and minimum of 1 and smoothed value at largest lambda)
pi0 <- rep(NA, length=n)
for(i in 1:n)
{
if(i %% 10000==0)
{
message(paste("At test #:",i))
}
spi0 <- smooth.spline(lambda, pi0.lambda[i,], df=smooth.df)
pi0.smooth[i, ] <- spi0$y
pi0[i] <- pi0.smooth[i,nLambda]
}
head(pi0)
head(pi0Old)
plot(pi0Old,pi0)
abline(0,1)
abline(0,1,col="red")
source('~/Research/FDR regression/functions.R')
alt="alt_beta"
load(paste(alt,"simResults_2.RData",sep="/"))
splineMat <- ns(tme,df=5)
##--------linear fit-------##
pi0EstSim.lin <- estimate_pi0x_sims(pValuesSims, tme)
##pull out means and variances of estimates at lambda=0.8, lambda=0.9, and final estimate
pi0Lin.MeansVars <- pullMeansVars(pi0EstSim.lin)
##---------spline fit---------#
pi0EstSim.spl <- estimate_pi0x_sims(pValuesSims, splineMat)
##pull out means and variances of estimates at lambda=0.8, lambda=0.9, and final estimate
pi0Spl.MeansVars <- pullMeansVars(pi0EstSim.spl)
##save full results
save(file=paste(alt,"simResults_pi0x_thresh_2_full.RData",sep="/"),
list=c("pi0EstSim.lin","pi0EstSim.spl"))
##save summary results
save(file=paste(alt,"simResults_pi0x_thresh_2.RData",sep="/"),
list=c("tme", "pi0", "pi0Lin.MeansVars", "pi0Spl.MeansVars"))
alt
alt=alts[2]
load(paste(alt,"simResults_2.RData",sep="/"))
splineMat <- ns(tme,df=5)
##--------linear fit-------##
pi0EstSim.lin <- estimate_pi0x_sims(pValuesSims, tme)
##pull out means and variances of estimates at lambda=0.8, lambda=0.9, and final estimate
pi0Lin.MeansVars <- pullMeansVars(pi0EstSim.lin)
##---------spline fit---------#
pi0EstSim.spl <- estimate_pi0x_sims(pValuesSims, splineMat)
##pull out means and variances of estimates at lambda=0.8, lambda=0.9, and final estimate
pi0Spl.MeansVars <- pullMeansVars(pi0EstSim.spl)
##save full results
save(file=paste(alt,"simResults_pi0x_thresh_2_full.RData",sep="/"),
list=c("pi0EstSim.lin","pi0EstSim.spl"))
##save summary results
save(file=paste(alt,"simResults_pi0x_thresh_2.RData",sep="/"),
list=c("tme", "pi0", "pi0Lin.MeansVars", "pi0Spl.MeansVars"))
